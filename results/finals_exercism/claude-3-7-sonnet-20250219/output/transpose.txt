=== Initial Source Code ===
Source file: exercises/practice/transpose/.meta/example.py
def transpose(lines):
    rows = [row.replace(' ', '_') for row in lines.splitlines()]
    rows = [row.ljust(len(max(rows, key=len))) for row in rows]
    rows = [''.join(row) for row in zip(*rows)]
    rows = [row.rstrip().replace('_', ' ') for row in rows]
    return '\n'.join(rows)


=== Source Interface ===
def transpose(text):
    pass


=== Target Interface ===
package transpose

func Transpose(input []string) []string {
	panic("Please implement the Transpose function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/transpose/canonical-data.json
# File last updated on 2024-08-26

import unittest

from transpose import (
    transpose,
)


class TransposeTest(unittest.TestCase):
    def test_empty_string(self):
        text = ""
        expected = ""

        self.assertEqual(transpose(text), expected)

    def test_two_characters_in_a_row(self):
        text = "A1"
        expected = "A\n1"

        self.assertEqual(transpose(text), expected)

    def test_two_characters_in_a_column(self):
        text = "A\n1"
        expected = "A1"

        self.assertEqual(transpose(text), expected)

    def test_simple(self):
        text = "ABC\n123"
        expected = "A1\nB2\nC3"

        self.assertEqual(transpose(text), expected)

    def test_single_line(self):
        text = "Single line."
        expected = "S\ni\nn\ng\nl\ne\n \nl\ni\nn\ne\n."

        self.assertEqual(transpose(text), expected)

    def test_first_line_longer_than_second_line(self):
        text = "The fourth line.\nThe fifth line."
        expected = "TT\nhh\nee\n  \nff\noi\nuf\nrt\nth\nh \n l\nli\nin\nne\ne.\n."

        self.assertEqual(transpose(text), expected)

    def test_second_line_longer_than_first_line(self):
        text = "The first line.\nThe second line."
        expected = "TT\nhh\nee\n  \nfs\nie\nrc\nso\ntn\n d\nl \nil\nni\nen\n.e\n ."

        self.assertEqual(transpose(text), expected)

    def test_mixed_line_length(self):
        text = "The longest line.\nA long line.\nA longer line.\nA line."
        expected = "TAAA\nh   \nelll\n ooi\nlnnn\nogge\nn e.\nglr\nei \nsnl\ntei\n .n\nl e\ni .\nn\ne\n."

        self.assertEqual(transpose(text), expected)

    def test_square(self):
        text = "HEART\nEMBER\nABUSE\nRESIN\nTREND"
        expected = "HEART\nEMBER\nABUSE\nRESIN\nTREND"

        self.assertEqual(transpose(text), expected)

    def test_rectangle(self):
        text = "FRACTURE\nOUTLINED\nBLOOMING\nSEPTETTE"
        expected = "FOBS\nRULE\nATOP\nCLOT\nTIME\nUNIT\nRENT\nEDGE"

        self.assertEqual(transpose(text), expected)

    def test_triangle(self):
        text = "T\nEE\nAAA\nSSSS\nEEEEE\nRRRRRR"
        expected = "TEASER\n EASER\n  ASER\n   SER\n    ER\n     R"

        self.assertEqual(transpose(text), expected)

    def test_jagged_triangle(self):
        text = "11\n2\n3333\n444\n555555\n66666"
        expected = "123456\n1 3456\n  3456\n  3 56\n    56\n    5"

        self.assertEqual(transpose(text), expected)


=== Target Test Code ===
package transpose

import (
	"reflect"
	"testing"
)

func TestTranspose(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			actual := Transpose(tc.input)
			if len(actual) == 0 && len(tc.expected) == 0 {
				return
			}
			if !reflect.DeepEqual(actual, tc.expected) {
				// let's make the error more specific and find the row it's on
				min := min(len(tc.expected), len(actual))
				for i := 0; i < min; i++ {
					if tc.expected[i] != actual[i] {
						t.Fatalf("Transpose(%#v)\n got:%#v\nwant:%#v\n row:%d\n got:%q\nwant:%q", tc.input, actual, tc.expected, i, actual[i], tc.expected[i])
					}
				}
				t.Fatalf("Transpose(%#v)\n got:%#v\nwant:%#v", tc.input, actual, tc.expected)
			}
		})
	}
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func BenchmarkTranspose(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, test := range testCases {
			Transpose(test.input)
		}
	}
}


=== Initial Translation ===
// exercises/practice/transpose/.meta/example.go
package transpose

import (
	"strings"
)

// Transpose converts rows to columns and columns to rows in a text matrix.
func Transpose(input []string) []string {
	// Handle empty input
	if len(input) == 0 {
		return []string{}
	}

	// Replace spaces with underscores to preserve them during transposition
	replacedSpaces := make([]string, len(input))
	for i, line := range input {
		replacedSpaces[i] = strings.ReplaceAll(line, " ", "_")
	}

	// Find the maximum length of any line
	maxLen := 0
	for _, line := range replacedSpaces {
		if len(line) > maxLen {
			maxLen = len(line)
		}
	}

	// Pad each line to the maximum length
	paddedLines := make([]string, len(replacedSpaces))
	for i, line := range replacedSpaces {
		paddedLines[i] = line + strings.Repeat(" ", maxLen-len(line))
	}

	// Transpose the matrix
	result := make([]string, maxLen)
	for i := 0; i < maxLen; i++ {
		var transposedRow strings.Builder
		for _, line := range paddedLines {
			if i < len(line) {
				transposedRow.WriteByte(line[i])
			} else {
				transposedRow.WriteByte(' ')
			}
		}
		// Trim trailing spaces and convert underscores back to spaces
		trimmed := strings.TrimRight(transposedRow.String(), " ")
		result[i] = strings.ReplaceAll(trimmed, "_", " ")
	}

	return result
}

=== Initial Test Results ===
Return code: 0
=== STDOUT ===
ok  	exercism/transpose	0.275s

=== STDERR ===


=== FINAL STATUS: SUCCESS ===