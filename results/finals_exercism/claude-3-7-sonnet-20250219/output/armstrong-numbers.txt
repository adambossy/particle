=== Initial Source Code ===
Source file: exercises/practice/armstrong-numbers/.meta/example.py
def is_armstrong_number(number):
    return sum(pow(int(digit), len(str(number))) for digit in str(number)) == number


=== Source Interface ===
def is_armstrong_number(number):
    pass


=== Target Interface ===
package armstrong

func IsNumber(n int) bool {
	panic("Please implement the IsNumber function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/armstrong-numbers/canonical-data.json
# File last updated on 2023-07-20

import unittest

from armstrong_numbers import (
    is_armstrong_number,
)


class ArmstrongNumbersTest(unittest.TestCase):
    def test_zero_is_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(0), True)

    def test_single_digit_numbers_are_armstrong_numbers(self):
        self.assertIs(is_armstrong_number(5), True)

    def test_there_are_no_two_digit_armstrong_numbers(self):
        self.assertIs(is_armstrong_number(10), False)

    def test_three_digit_number_that_is_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(153), True)

    def test_three_digit_number_that_is_not_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(100), False)

    def test_four_digit_number_that_is_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(9474), True)

    def test_four_digit_number_that_is_not_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(9475), False)

    def test_seven_digit_number_that_is_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(9926315), True)

    def test_seven_digit_number_that_is_not_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(9926314), False)


=== Target Test Code ===
package armstrong

import (
	"testing"
)

func TestArmstrong(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := IsNumber(tc.input); actual != tc.expected {
				t.Fatalf("IsNumber(%d) = %t, want: %t", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkIsNumber(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for _, tc := range testCases {
		for i := 0; i < b.N; i++ {
			IsNumber(tc.input)
		}
	}
}


=== Initial Translation ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import (
	"math"
	"strconv"
)

// IsNumber determines if a number is an Armstrong number.
// An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits.
func IsNumber(n int) bool {
	// Convert number to string to work with individual digits
	numStr := strconv.Itoa(n)
	numDigits := len(numStr)
	sum := 0

	// Calculate sum of each digit raised to the power of number of digits
	for _, digitRune := range numStr {
		digit, _ := strconv.Atoi(string(digitRune))
		sum += int(math.Pow(float64(digit), float64(numDigits)))
	}

	// Check if the sum equals the original number
	return sum == n
}

=== Initial Test Results ===
Return code: 0
=== STDOUT ===
ok  	exercism/armstrong-numbers	0.433s

=== STDERR ===


=== FINAL STATUS: SUCCESS ===