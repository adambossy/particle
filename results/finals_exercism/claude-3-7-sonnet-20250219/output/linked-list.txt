=== Initial Source Code ===
Source file: exercises/practice/linked-list/.meta/example.py
class Node:
    def __init__(self, value, succeeding=None, previous=None):
        self.value = value
        self.succeeding = succeeding
        self.prev = previous


class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0

    def __len__(self):
        return self.length

    def __iter__(self):
        current_node = self.head
        while current_node:
            yield (current_node.value, current_node.succeeding, current_node.prev)
            current_node = current_node.succeeding

    def delete(self, to_delete):
        if self.length == 0:
            raise ValueError("Value not found")
        found = False
        node = self.head

        for value, succeeding, prev in self:
            if value == to_delete:
                if prev:
                    node.prev.succeeding = succeeding
                else:
                    self.head = succeeding
                if succeeding:
                    node.succeeding.prev = prev
                else:
                    self.tail = prev

                found = True
                self.length -= 1
                break
            node = node.succeeding
        if not found:
            raise ValueError("Value not found")

    def push(self, value):
        new_node = Node(value)
        if not self.head:
            self.head = self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.succeeding = new_node
            self.tail = new_node

        self.length += 1

    def pop(self):
        node = self.tail

        if self.length == 0:
            raise IndexError("List is empty")
        if node is None or node.prev is None:
            self.head = self.tail = None
        else:
            self.tail = self.tail.prev
            self.tail.succeeding = None
        self.length -= 1

        return node.value

    def shift(self):
        if self.length == 0:
            raise IndexError("List is empty")
        node = self.head
        if node is None or node.succeeding is None:
            self.head = self.tail = None
        else:
            self.head = self.head.succeeding
            self.head.prev = None
        self.length -= 1

        return node.value

    def unshift(self, value):
        new_node = Node(value)
        if not self.head:
            self.head = self.tail = new_node
        else:
            new_node.succeeding = self.head
            self.head.prev = new_node
            self.head = new_node

        self.length += 1


=== Source Interface ===
class Node:
    def __init__(self, value, succeeding=None, previous=None):
        pass


class LinkedList:
    def __init__(self):
        pass


=== Target Interface ===
package linkedlist

// Define List and Node types here.
// Note: The tests expect Node type to include an exported field with name Value to pass.

func NewList(elements ...interface{}) *List {
	panic("Please implement the NewList function")
}

func (n *Node) Next() *Node {
	panic("Please implement the Next function")
}

func (n *Node) Prev() *Node {
	panic("Please implement the Prev function")
}

func (l *List) Unshift(v interface{}) {
	panic("Please implement the Unshift function")
}

func (l *List) Push(v interface{}) {
	panic("Please implement the Push function")
}

func (l *List) Shift() (interface{}, error) {
	panic("Please implement the Shift function")
}

func (l *List) Pop() (interface{}, error) {
	panic("Please implement the Pop function")
}

func (l *List) Reverse() {
	panic("Please implement the Reverse function")
}

func (l *List) First() *Node {
	panic("Please implement the First function")
}

func (l *List) Last() *Node {
	panic("Please implement the Last function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/linked-list/canonical-data.json
# File last updated on 2023-07-19

import unittest

from linked_list import (
    LinkedList,
)


class LinkedListTest(unittest.TestCase):
    def test_pop_gets_element_from_the_list(self):
        lst = LinkedList()
        lst.push(7)
        self.assertEqual(lst.pop(), 7)

    def test_push_pop_respectively_add_remove_at_the_end_of_the_list(self):
        lst = LinkedList()
        lst.push(11)
        lst.push(13)
        self.assertEqual(lst.pop(), 13)
        self.assertEqual(lst.pop(), 11)

    def test_shift_gets_an_element_from_the_list(self):
        lst = LinkedList()
        lst.push(17)
        self.assertEqual(lst.shift(), 17)

    def test_shift_gets_first_element_from_the_list(self):
        lst = LinkedList()
        lst.push(23)
        lst.push(5)
        self.assertEqual(lst.shift(), 23)
        self.assertEqual(lst.shift(), 5)

    def test_unshift_adds_element_at_start_of_the_list(self):
        lst = LinkedList()
        lst.unshift(23)
        lst.unshift(5)
        self.assertEqual(lst.shift(), 5)
        self.assertEqual(lst.shift(), 23)

    def test_pop_push_shift_and_unshift_can_be_used_in_any_order(self):
        lst = LinkedList()
        lst.push(1)
        lst.push(2)
        self.assertEqual(lst.pop(), 2)
        lst.push(3)
        self.assertEqual(lst.shift(), 1)
        lst.unshift(4)
        lst.push(5)
        self.assertEqual(lst.shift(), 4)
        self.assertEqual(lst.pop(), 5)
        self.assertEqual(lst.shift(), 3)

    def test_count_an_empty_list(self):
        lst = LinkedList()
        self.assertEqual(len(lst), 0)

    def test_count_a_list_with_items(self):
        lst = LinkedList()
        lst.push(37)
        lst.push(1)
        self.assertEqual(len(lst), 2)

    def test_count_is_correct_after_mutation(self):
        lst = LinkedList()
        lst.push(31)
        self.assertEqual(len(lst), 1)
        lst.unshift(43)
        self.assertEqual(len(lst), 2)
        lst.shift()
        self.assertEqual(len(lst), 1)
        lst.pop()
        self.assertEqual(len(lst), 0)

    def test_popping_to_empty_doesn_t_break_the_list(self):
        lst = LinkedList()
        lst.push(41)
        lst.push(59)
        lst.pop()
        lst.pop()
        lst.push(47)
        self.assertEqual(len(lst), 1)
        self.assertEqual(lst.pop(), 47)

    def test_shifting_to_empty_doesn_t_break_the_list(self):
        lst = LinkedList()
        lst.push(41)
        lst.push(59)
        lst.shift()
        lst.shift()
        lst.push(47)
        self.assertEqual(len(lst), 1)
        self.assertEqual(lst.shift(), 47)

    def test_deletes_the_only_element(self):
        lst = LinkedList()
        lst.push(61)
        lst.delete(61)
        self.assertEqual(len(lst), 0)

    def test_deletes_the_element_with_the_specified_value_from_the_list(self):
        lst = LinkedList()
        lst.push(71)
        lst.push(83)
        lst.push(79)
        lst.delete(83)
        self.assertEqual(len(lst), 2)
        self.assertEqual(lst.pop(), 79)
        self.assertEqual(lst.shift(), 71)

    def test_deletes_the_element_with_the_specified_value_from_the_list_re_assigns_tail(
        self,
    ):
        lst = LinkedList()
        lst.push(71)
        lst.push(83)
        lst.push(79)
        lst.delete(83)
        self.assertEqual(len(lst), 2)
        self.assertEqual(lst.pop(), 79)
        self.assertEqual(lst.pop(), 71)

    def test_deletes_the_element_with_the_specified_value_from_the_list_re_assigns_head(
        self,
    ):
        lst = LinkedList()
        lst.push(71)
        lst.push(83)
        lst.push(79)
        lst.delete(83)
        self.assertEqual(len(lst), 2)
        self.assertEqual(lst.shift(), 71)
        self.assertEqual(lst.shift(), 79)

    def test_deletes_the_first_of_two_elements(self):
        lst = LinkedList()
        lst.push(97)
        lst.push(101)
        lst.delete(97)
        self.assertEqual(len(lst), 1)
        self.assertEqual(lst.pop(), 101)

    def test_deletes_the_second_of_two_elements(self):
        lst = LinkedList()
        lst.push(97)
        lst.push(101)
        lst.delete(101)
        self.assertEqual(len(lst), 1)
        self.assertEqual(lst.pop(), 97)

    def test_deletes_only_the_first_occurrence(self):
        lst = LinkedList()
        lst.push(73)
        lst.push(9)
        lst.push(9)
        lst.push(107)
        lst.delete(9)
        self.assertEqual(len(lst), 3)
        self.assertEqual(lst.pop(), 107)
        self.assertEqual(lst.pop(), 9)
        self.assertEqual(lst.pop(), 73)

    # Additional tests for this track
    def test_using_pop_raises_an_error_if_the_list_is_empty(self):
        lst = LinkedList()
        with self.assertRaises(IndexError) as err:
            lst.pop()
            self.assertEqual(type(err.exception), IndexError)
            self.assertEqual(err.exception.args[0], "List is empty")

    def test_can_return_with_pop_and_then_raise_an_error_if_empty(self):
        lst = LinkedList()
        lst.push(1)
        lst.unshift(5)
        self.assertEqual(lst.pop(), 1)
        self.assertEqual(lst.pop(), 5)
        with self.assertRaises(IndexError) as err:
            lst.pop()
            self.assertEqual(type(err.exception), IndexError)
            self.assertEqual(err.exception.args[0], "List is empty")

    def test_using_shift_raises_an_error_if_the_list_is_empty(self):
        lst = LinkedList()
        with self.assertRaises(IndexError) as err:
            lst.shift()
            self.assertEqual(type(err.exception), IndexError)
            self.assertEqual(err.exception.args[0], "List is empty")

    def test_can_return_with_shift_and_then_raise_an_error_if_empty(self):
        lst = LinkedList()
        lst.push(1)
        lst.unshift(5)
        self.assertEqual(lst.pop(), 1)
        self.assertEqual(lst.shift(), 5)
        with self.assertRaises(IndexError) as err:
            lst.shift()
            self.assertEqual(type(err.exception), IndexError)
            self.assertEqual(err.exception.args[0], "List is empty")

    def test_using_delete_raises_an_error_if_the_list_is_empty(self):
        lst = LinkedList()
        with self.assertRaises(ValueError) as err:
            lst.delete(0)
            self.assertEqual(type(err.exception), ValueError)
            self.assertEqual(err.exception.args[0], "Value not found")

    def test_using_delete_raises_an_error_if_the_value_is_not_found(self):
        lst = LinkedList()
        lst.push(5)
        lst.push(7)
        self.assertEqual(lst.pop(), 7)
        with self.assertRaises(ValueError) as err:
            lst.delete(0)
            self.assertEqual(type(err.exception), ValueError)
            self.assertEqual(err.exception.args[0], "Value not found")


=== Target Test Code ===
package linkedlist

import (
	"bytes"
	"fmt"
	"testing"
)

func TestNew(t *testing.T) {
	for _, tc := range newListTestCases {
		t.Run(tc.name, func(t *testing.T) {
			actual := NewList(tc.in...)

			checkDoublyLinkedList(t, actual, tc.expected)
		})
	}
}

func TestReverse(t *testing.T) {
	for _, tc := range reverseTestCases {
		t.Run(tc.name, func(t *testing.T) {
			actual := NewList(tc.in...)
			actual.Reverse()

			checkDoublyLinkedList(t, actual, tc.expected)
		})
	}
}

func TestPushPop(t *testing.T) {
	for _, tc := range pushPopTestCases {
		t.Run(tc.name, func(t *testing.T) {
			actual := NewList(tc.in...)
			for _, ac := range tc.actions {
				ac(t, actual)
			}

			checkDoublyLinkedList(t, actual, tc.expected)
		})
	}
}

// checkDoublyLinkedList checks that the linked list is constructed correctly.
func checkDoublyLinkedList(t *testing.T, ll *List, expected []interface{}) {
	// check that length and elements are correct (scan once from begin -> end)
	elem, count, idx := ll.First(), 0, 0
	for ; elem != nil && idx < len(expected); elem, count, idx = elem.Next(), count+1, idx+1 {
		if elem.Value != expected[idx] {
			t.Errorf("wrong value from %d-th element, expected= %v, got= %v", idx, expected[idx], elem.Value)
		}
	}
	if !(elem == nil && idx == len(expected)) {
		t.Errorf("expected %d elements, got= %d", len(expected), count)
	}

	// if elements are the same, we also need to examine the links (next & prev)
	switch {
	case ll.First() == nil && ll.Last() == nil: // empty list
		return
	case ll.First() != nil && ll.Last() != nil && ll.First().Next() == nil: // 1 element
		valid := ll.First() == ll.Last() &&
			ll.First().Next() == nil &&
			ll.First().Prev() == nil &&
			ll.Last().Next() == nil &&
			ll.Last().Prev() == nil

		if !valid {
			t.Errorf("expected to only have 1 element and no links, got= %v", ll.debugString())
		}
	}

	// >1 element
	if ll.First().Prev() != nil {
		t.Errorf("expected Head.Prev() == nil, got= %v", ll.First().Prev())
	}

	prev := ll.First()
	cur := ll.First().Next()
	counter := 0

	for idx := 0; cur != nil; idx++ {
		if !(prev.Next() == cur && cur.Prev() == prev) {
			t.Errorf("%d-th element's links is wrong", idx)
		}

		counter++
		if counter > 100 {
			t.Errorf("Possible infinite loop detected and stopped. Check the .Next() implementation.")
			return
		}

		prev = cur
		cur = cur.Next()
	}

	if ll.Last().Next() != nil {
		t.Errorf("expected Last().Next() == nil, got= %v", ll.Last().Next())
	}
}

// debugString prints the linked list with both node's Value, next & prev pointers.
func (ll *List) debugString() string {
	buf := bytes.NewBuffer([]byte{'{'})
	fmt.Fprintf(buf, "First()= %p; ", ll.First())

	counter := 0

	for cur := ll.First(); cur != nil; cur = cur.Next() {
		counter++
		if counter > 100 {
			panic("Possible infinite loop detected and stopped. Check the .Next() implementation")
		}
		fmt.Fprintf(buf, "[Prev()= %p, Value= %p (%v), Next()= %p] <-> ", cur.Prev(), cur, cur.Value, cur.Next())
	}

	fmt.Fprintf(buf, "; Last()= %p; ", ll.Last())

	return buf.String()
}


=== Initial Translation ===
// exercises/practice/linked-list/.meta/example.go
package linkedlist

import "errors"

// Node represents a node in a linked list
type Node struct {
	Value      interface{}
	succeeding *Node
	prev       *Node
}

// List represents a doubly linked list
type List struct {
	head   *Node
	tail   *Node
	length int
}

// Next returns the next node in the list
func (n *Node) Next() *Node {
	return n.succeeding
}

// Prev returns the previous node in the list
func (n *Node) Prev() *Node {
	return n.prev
}

// NewList creates a new linked list with the given elements
func NewList(elements ...interface{}) *List {
	list := &List{}
	for _, element := range elements {
		list.Push(element)
	}
	return list
}

// First returns the first node in the list
func (l *List) First() *Node {
	return l.head
}

// Last returns the last node in the list
func (l *List) Last() *Node {
	return l.tail
}

// Push adds a new value to the end of the list
func (l *List) Push(value interface{}) {
	newNode := &Node{Value: value}
	if l.head == nil {
		l.head = newNode
		l.tail = newNode
	} else {
		newNode.prev = l.tail
		l.tail.succeeding = newNode
		l.tail = newNode
	}
	l.length++
}

// Pop removes the last element from the list and returns its value
func (l *List) Pop() (interface{}, error) {
	if l.length == 0 {
		return nil, errors.New("List is empty")
	}

	node := l.tail
	if node.prev == nil {
		l.head = nil
		l.tail = nil
	} else {
		l.tail = l.tail.prev
		l.tail.succeeding = nil
	}
	l.length--

	return node.Value, nil
}

// Shift removes the first element from the list and returns its value
func (l *List) Shift() (interface{}, error) {
	if l.length == 0 {
		return nil, errors.New("List is empty")
	}

	node := l.head
	if node.succeeding == nil {
		l.head = nil
		l.tail = nil
	} else {
		l.head = l.head.succeeding
		l.head.prev = nil
	}
	l.length--

	return node.Value, nil
}

// Unshift adds a new value to the beginning of the list
func (l *List) Unshift(value interface{}) {
	newNode := &Node{Value: value}
	if l.head == nil {
		l.head = newNode
		l.tail = newNode
	} else {
		newNode.succeeding = l.head
		l.head.prev = newNode
		l.head = newNode
	}
	l.length++
}

// Reverse reverses the linked list
func (l *List) Reverse() {
	if l.length <= 1 {
		return
	}

	current := l.head
	l.tail = current

	for current != nil {
		next := current.succeeding
		current.succeeding = current.prev
		current.prev = next

		if next == nil {
			l.head = current
		}

		current = next
	}
}

=== Initial Test Results ===
Return code: 0
=== STDOUT ===
ok  	exercism/linked-list	0.284s

=== STDERR ===


=== FINAL STATUS: SUCCESS ===