=== Initial Source Code ===
Source file: exercises/practice/crypto-square/.meta/example.py
from math import ceil, sqrt
from itertools import zip_longest


def cipher_text(plain_text):
    plain_text = _cleanse(plain_text)
    square_size = int(ceil(sqrt(len(plain_text))))
    square = _chunks_of(plain_text, square_size)
    return ' '.join([''.join(column)
                     for column in zip_longest(*square, fillvalue=' ')])


def _cleanse(text):
    """Lowercase a string and remove punctuation and whitespace
    """
    return ''.join([character for character in text
                    if character.isalnum()]).lower()


def _chunks_of(text, num):
    if len(text) <= num:
        return [text]
    return [text[:num]] + _chunks_of(text[num:], num)


=== Source Interface ===
def cipher_text(plain_text):
    pass


=== Target Interface ===
package cryptosquare

func Encode(pt string) string {
	panic("Please implement the Encode function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/crypto-square/canonical-data.json
# File last updated on 2023-07-19

import unittest

from crypto_square import (
    cipher_text,
)


class CryptoSquareTest(unittest.TestCase):
    def test_empty_plaintext_results_in_an_empty_ciphertext(self):
        value = ""
        expected = ""
        self.assertEqual(cipher_text(value), expected)

    def test_normalization_results_in_empty_plaintext(self):
        value = "... --- ..."
        expected = ""
        self.assertEqual(cipher_text(value), expected)

    def test_lowercase(self):
        value = "A"
        expected = "a"
        self.assertEqual(cipher_text(value), expected)

    def test_remove_spaces(self):
        value = "  b "
        expected = "b"
        self.assertEqual(cipher_text(value), expected)

    def test_remove_punctuation(self):
        value = "@1,%!"
        expected = "1"
        self.assertEqual(cipher_text(value), expected)

    def test_9_character_plaintext_results_in_3_chunks_of_3_characters(self):
        value = "This is fun!"
        expected = "tsf hiu isn"
        self.assertEqual(cipher_text(value), expected)

    def test_8_character_plaintext_results_in_3_chunks_the_last_one_with_a_trailing_space(
        self,
    ):
        value = "Chill out."
        expected = "clu hlt io "
        self.assertEqual(cipher_text(value), expected)

    def test_54_character_plaintext_results_in_7_chunks_the_last_two_with_trailing_spaces(
        self,
    ):
        value = "If man was meant to stay on the ground, god would have given us roots."
        expected = "imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau "
        self.assertEqual(cipher_text(value), expected)


=== Target Test Code ===
package cryptosquare

import "testing"

var tests = []struct {
	input    string // plain text
	expected string // cipher text
}{
	{
		input:    "s#$%^&plunk",
		expected: "su pn lk",
	},
	{
		input:    "1, 2, 3 GO!",
		expected: "1g 2o 3 ",
	},
	{
		input:    "1234",
		expected: "13 24",
	},
	{
		input:    "123456789",
		expected: "147 258 369",
	},
	{
		input:    "123456789abc",
		expected: "159 26a 37b 48c",
	},
	{
		input:    "Never vex thine heart with idle woes",
		expected: "neewl exhie vtetw ehaho ririe vntds",
	},
	{
		input:    "ZOMG! ZOMBIES!!!",
		expected: "zzi ooe mms gb ",
	},
	{
		input:    "Time is an illusion. Lunchtime doubly so.",
		expected: "tasney inicds miohoo elntu  illib  suuml ",
	},
	{
		input:    "We all know interspecies romance is weird.",
		expected: "wneiaw eorene awssci liprer lneoid ktcms ",
	},
	{
		input:    "Madness, and then illumination.",
		expected: "msemo aanin dnin  ndla  etlt  shui ",
	},
	{
		input:    "Vampires are people too!",
		expected: "vrel aepe mset paoo irpo",
	},
	{
		input:    "",
		expected: "",
	},
	{
		input:    "1",
		expected: "1",
	},
	{
		input:    "12",
		expected: "1 2",
	},
	{
		input:    "12 3",
		expected: "13 2 ",
	},
	{
		input:    "12345678",
		expected: "147 258 36 ",
	},
	{
		input:    "123456789a",
		expected: "159 26a 37  48 ",
	},
	{
		input:    "If man was meant to stay on the ground god would have given us roots",
		expected: "imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau ",
	},
	{
		input:    "Have a nice day. Feed the dog & chill out!",
		expected: "hifei acedl veeol eddgo aatcu nyhht",
	},
}

func TestEncode(t *testing.T) {
	for _, test := range tests {
		t.Run(test.input, func(t *testing.T) {
			if got := Encode(test.input); got != test.expected {
				t.Fatalf("Encode(%q):\n got:%q\nwant:%q", test.input, got, test.expected)
			}
		})
	}
}

func BenchmarkEncode(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, test := range tests {
			Encode(test.input)
		}
	}
}


=== Initial Translation ===
// exercises/practice/crypto-square/.meta/example.go
package cryptosquare

import (
	"math"
	"strings"
	"unicode"
)

// Encode encrypts a message using the crypto square method
func Encode(plainText string) string {
	plainText = cleanse(plainText)
	if len(plainText) == 0 {
		return ""
	}

	squareSize := int(math.Ceil(math.Sqrt(float64(len(plainText)))))
	square := chunksOf(plainText, squareSize)
	
	result := make([]string, 0, squareSize)
	
	// Transpose the chunks
	for col := 0; col < squareSize; col++ {
		var columnChars strings.Builder
		for row := 0; row < len(square); row++ {
			if col < len(square[row]) {
				columnChars.WriteByte(square[row][col])
			} else {
				columnChars.WriteByte(' ')
			}
		}
		result = append(result, columnChars.String())
	}
	
	return strings.Join(result, " ")
}

// cleanse lowercases a string and removes punctuation and whitespace
func cleanse(text string) string {
	var result strings.Builder
	for _, char := range text {
		if unicode.IsLetter(char) || unicode.IsDigit(char) {
			result.WriteRune(unicode.ToLower(char))
		}
	}
	return result.String()
}

// chunksOf splits text into chunks of specified size
func chunksOf(text string, size int) []string {
	if len(text) <= size {
		return []string{text}
	}
	
	return append([]string{text[:size]}, chunksOf(text[size:], size)...)
}

=== Initial Test Results ===
Return code: 0
=== STDOUT ===
ok  	exercism/crypto-square	0.272s

=== STDERR ===


=== FINAL STATUS: SUCCESS ===