=== Initial Source Code ===
Source file: exercises/practice/hello-world/.meta/example.py
def hello():
    return 'Hello, World!'


=== Source Interface ===
def hello():
    return 'Goodbye, Mars!'


=== Target Interface ===
package greeting

// HelloWorld greets the world.
func HelloWorld() string {
	return "Goodbye, Mars!"
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/hello-world/canonical-data.json
# File last updated on 2023-07-19

import unittest

try:
    from hello_world import (
        hello,
    )

except ImportError as import_fail:
    message = import_fail.args[0].split("(", maxsplit=1)
    item_name = import_fail.args[0].split()[3]

    item_name = item_name[:-1] + "()'"

    # pylint: disable=raise-missing-from
    raise ImportError(
        "\n\nMISSING FUNCTION --> In your 'hello_world.py' file, we can not find or import the"
        f" function named {item_name}. \nThe tests for this first exercise expect a function that"
        f' returns the string "Hello, World!"'
        f'\n\nDid you use print("Hello, World!") instead?'
    ) from None


class HelloWorldTest(unittest.TestCase):
    def test_say_hi(self):
        msg = "\n\nThis test expects a return of the string 'Hello, World!' \nDid you use print('Hello, World!') by mistake?"
        self.assertEqual(hello(), "Hello, World!", msg=msg)


=== Target Test Code ===
package greeting

import "testing"

// Define a function named HelloWorld that takes no arguments,
// and returns a string.
// In other words, define a function with the following signature:
// HelloWorld() string

func TestHelloWorld(t *testing.T) {
	expected := "Hello, World!"
	if observed := HelloWorld(); observed != expected {
		t.Fatalf("HelloWorld() = %v, want %v", observed, expected)
	}
}

// BenchmarkHelloWorld() is a benchmarking function. These functions follow the
// form `func BenchmarkXxx(*testing.B)` and can be used to test the performance
// of your implementation. They may not be present in every exercise, but when
// they are you can run them by including the `-bench` flag with the `go test`
// command, like so: `go test -v --bench . --benchmem`
//
// You will see output similar to the following:
//
// BenchmarkHelloWorld   	2000000000	         0.46 ns/op
//
// This means that the loop ran 2000000000 times at a speed of 0.46 ns per loop.
//
// While benchmarking can be useful to compare different iterations of the same
// exercise, keep in mind that others will run the same benchmarks on different
// machines, with different specs, so the results from these benchmark tests may
// vary.
func BenchmarkHelloWorld(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		HelloWorld()
	}
}


=== Initial Translation ===
// exercises/practice/hello-world/.meta/example.go
package greeting

// HelloWorld returns a greeting to the world.
func HelloWorld() string {
	return "Hello, World!"
}

=== Initial Test Results ===
Return code: 0
=== STDOUT ===
ok  	exercism/hello-world	0.466s

=== STDERR ===


=== FINAL STATUS: SUCCESS ===