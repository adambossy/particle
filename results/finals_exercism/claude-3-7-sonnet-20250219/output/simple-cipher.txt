=== Initial Source Code ===
Source file: exercises/practice/simple-cipher/.meta/example.py
from string import ascii_lowercase
from time import time
import random
from itertools import cycle


class Cipher:

    def __init__(self, key=None):
        if key is None:
            random.seed(time())
            key = ''.join(random.choice(ascii_lowercase) for _ in range(100))
        self.key = key

    def encode(self, text):
        return ''.join(
            chr(((ord(character) - 2 * ord('a') + ord(key)) % 26) + ord('a'))
            for character, key in zip(text, cycle(self.key))
        )

    def decode(self, text):
        return ''.join(
            chr(((ord(character) - ord(key) + 26) % 26) + ord('a'))
            for character, key in zip(text, cycle(self.key))
        )


=== Source Interface ===
class Cipher:
    def __init__(self, key=None):
        pass

    def encode(self, text):
        pass

    def decode(self, text):
        pass


=== Target Interface ===
package cipher

// Define the shift and vigenere types here.
// Both types should satisfy the Cipher interface.

func NewCaesar() Cipher {
	panic("Please implement the NewCaesar function")
}

func NewShift(distance int) Cipher {
	panic("Please implement the NewShift function")
}

func (c shift) Encode(input string) string {
	panic("Please implement the Encode function")
}

func (c shift) Decode(input string) string {
	panic("Please implement the Decode function")
}

func NewVigenere(key string) Cipher {
	panic("Please implement the NewVigenere function")
}

func (v vigenere) Encode(input string) string {
	panic("Please implement the Encode function")
}

func (v vigenere) Decode(input string) string {
	panic("Please implement the Decode function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/simple-cipher/canonical-data.json
# File last updated on 2023-07-20

import re
import unittest

from simple_cipher import (
    Cipher,
)


class RandomKeyCipherTest(unittest.TestCase):
    def test_can_encode(self):
        cipher = Cipher()
        plaintext = "aaaaaaaaaa"
        self.assertEqual(cipher.encode(plaintext), cipher.key[0 : len(plaintext)])

    def test_can_decode(self):
        cipher = Cipher()
        self.assertEqual(cipher.decode(cipher.key[0 : len("aaaaaaaaaa")]), "aaaaaaaaaa")

    def test_is_reversible(self):
        cipher = Cipher()
        plaintext = "abcdefghij"
        self.assertEqual(cipher.decode(cipher.encode(plaintext)), plaintext)

    def test_key_is_made_only_of_lowercase_letters(self):
        self.assertIsNotNone(re.match("^[a-z]+$", Cipher().key))


class SubstitutionCipherTest(unittest.TestCase):
    def test_can_encode(self):
        cipher = Cipher("abcdefghij")
        plaintext = "aaaaaaaaaa"
        self.assertEqual(cipher.encode(plaintext), cipher.key)

    def test_can_decode(self):
        cipher = Cipher("abcdefghij")
        self.assertEqual(cipher.decode(cipher.key), "aaaaaaaaaa")

    def test_is_reversible(self):
        cipher = Cipher("abcdefghij")
        plaintext = "abcdefghij"
        self.assertEqual(cipher.decode(cipher.encode(plaintext)), plaintext)

    def test_can_double_shift_encode(self):
        cipher = Cipher("iamapandabear")
        plaintext = "iamapandabear"
        self.assertEqual(cipher.encode(plaintext), "qayaeaagaciai")

    def test_can_wrap_on_encode(self):
        cipher = Cipher("abcdefghij")
        plaintext = "zzzzzzzzzz"
        self.assertEqual(cipher.encode(plaintext), "zabcdefghi")

    def test_can_wrap_on_decode(self):
        cipher = Cipher("abcdefghij")
        self.assertEqual(cipher.decode("zabcdefghi"), "zzzzzzzzzz")

    def test_can_encode_messages_longer_than_the_key(self):
        cipher = Cipher("abc")
        plaintext = "iamapandabear"
        self.assertEqual(cipher.encode(plaintext), "iboaqcnecbfcr")

    def test_can_decode_messages_longer_than_the_key(self):
        cipher = Cipher("abc")
        self.assertEqual(cipher.decode("iboaqcnecbfcr"), "iamapandabear")


=== Target Test Code ===
package cipher

import (
	"fmt"
	"testing"
)

// type for testing implementations of the Cipher interface
type cipherTest struct {
	source string // source text, any UTF-8
	cipher string // cipher text, result of Encode(st)
	plain  string // decoded plain text, result of Decode(ct)
}

var caesarPrepped = []cipherTest{
	{"iamapandabear", "ldpdsdqgdehdu", "iamapandabear"},
	{"programmingisawesome", "surjudpplqjlvdzhvrph", "programmingisawesome"},
	{"todayisholiday", "wrgdblvkrolgdb", "todayisholiday"},
	{"venividivici", "yhqlylglylfl", "venividivici"},
}

var caesarTests = []cipherTest{
	{"Go, go, gophers", "jrjrjrskhuv", "gogogophers"},
	{"I am a panda bear.", "ldpdsdqgdehdu", "iamapandabear"},
	{"Programming is AWESOME!", "surjudpplqjlvdzhvrph", "programmingisawesome"},
	{"today is holiday", "wrgdblvkrolgdb", "todayisholiday"},
	{"Twas the night before Christmas", "wzdvwkhqljkwehiruhfkulvwpdv", "twasthenightbeforechristmas"},
	{" -- @#!", "", ""},
	{"", "", ""},
}

func TestCaesar(t *testing.T) {
	c := NewCaesar()
	t.Run("no extra symbols", func(t *testing.T) {
		testCipher(c, caesarPrepped, t)
	})
	t.Run("with extra symbols", func(t *testing.T) {
		testCipher(c, caesarTests, t)
	})
}

func testCipher(c Cipher, tests []cipherTest, t *testing.T) {
	for _, test := range tests {
		t.Run(fmt.Sprintf("Encode(%s)", test.source), func(tt *testing.T) {
			if enc := c.Encode(test.source); enc != test.cipher {
				tt.Fatalf("Encode(%s): got %q, want %q.", test.source, enc, test.cipher)
			}
		})
		t.Run(fmt.Sprintf("Decode(%s)", test.cipher), func(tt *testing.T) {
			if dec := c.Decode(test.cipher); dec != test.plain {
				tt.Fatalf("Decode(%s): got %q, want %q.", test.cipher, dec, test.plain)
			}
		})
	}
}

var NSATests = []cipherTest{
	{"THE ENEMY IS NEAR", "qebbkbjvfpkbxo", "theenemyisnear"},
	{"SPIES SEND SECRET MESSAGES",
		"pmfbppbkapbzobqjbppxdbp",
		"spiessendsecretmessages"},
	{"THOMAS JEFFERSON DESIGNED A SUBSTITUTION CIPHER",
		"qeljxpgbccboplkabpfdkbaxprypqfqrqflkzfmebo",
		"thomasjeffersondesignedasubstitutioncipher"},
	{"the quick brown fox jumps over the lazy dog",
		"qebnrfzhyoltkclugrjmplsboqebixwvald",
		"thequickbrownfoxjumpsoverthelazydog"},
}

func TestShift(t *testing.T) {
	// test shift(3) against Caesar cases.
	t.Run(fmt.Sprintf("key=%d", 3), func(t *testing.T) {
		c := NewShift(3)
		if c == nil {
			t.Fatal("NewShift(3): got nil, want non-nil Cipher")
		}
		testCipher(c, caesarTests, t)
	})

	// NSA and WP say Caesar uses shift of -3
	t.Run(fmt.Sprintf("key=%d", -3), func(t *testing.T) {
		c := NewShift(-3)
		if c == nil {
			t.Fatal("NewShift(-3): got nil, want non-nil Cipher")
		}
		testCipher(c, NSATests, t)
	})

}

func TestWrongShiftKey(t *testing.T) {
	for _, s := range []int{-27, -26, 0, 26, 27} {
		if NewShift(s) != nil {
			t.Errorf("NewShift(%d): got non-nil, want nil", s)
		}
	}
}

var vtests = []struct {
	key   string
	tests []cipherTest
}{
	{"lemon", []cipherTest{{"ATTACKATDAWN", "lxfopvefrnhr", "attackatdawn"}}},
	{"abcdefghij", []cipherTest{
		{"aaaaaaaaaa", "abcdefghij", "aaaaaaaaaa"},
		{"zzzzzzzzzz", "zabcdefghi", "zzzzzzzzzz"},
	}},
	{"iamapandabear", []cipherTest{
		{"I am a panda bear.", "qayaeaagaciai", "iamapandabear"},
	}},
	{"duxrceqyaimciuucnelkeoxjhdyduu", []cipherTest{
		{"Diffie Hellman", "gccwkixcltycv", "diffiehellman"},
	}},
	{"qgbvno", []cipherTest{
		{"cof-FEE, 123!", "sugars", "coffee"},
	}},
}

func TestVigenere(t *testing.T) {
	for _, test := range vtests {
		t.Run(fmt.Sprintf("key=%s", test.key), func(t *testing.T) {
			v := NewVigenere(test.key)
			if v == nil {
				t.Fatalf("NewVigenere(%q): got nil, want non-nil Cipher",
					test.key)
			}
			testCipher(v, test.tests, t)
		})
	}
}

func TestVigenereWrongKey(t *testing.T) {
	for _, k := range []string{"", "a", "aa", "no way", "CAT", "3", "and,"} {
		if NewVigenere(k) != nil {
			t.Errorf("NewVigenere(%q): got non-nil, want nil", k)
		}
	}
}

// Benchmark combined time to run all tests.
// Note other ciphers test different data; times cannot be compared.
func BenchmarkEncodeCaesar(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	c := NewCaesar()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for _, test := range caesarTests {
			c.Encode(test.source)
		}
	}
}

func BenchmarkDecodeCaesar(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	c := NewCaesar()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for _, test := range caesarTests {
			c.Decode(test.cipher)
		}
	}
}

func BenchmarkNewShift(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for s := -27; s <= 27; s++ {
			NewShift(s)
		}
	}
}

func BenchmarkEncodeShift(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	s := NewShift(5)
	all := caesarTests
	all = append(all, NSATests...)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for _, test := range all {
			s.Encode(test.source)
		}
	}
}

func BenchmarkDecodeShift(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	s := NewShift(5)
	all := caesarTests
	all = append(all, NSATests...)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for _, test := range all {
			s.Decode(test.cipher)
		}
	}
}

func BenchmarkNewVigenere(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, test := range vtests {
			NewVigenere(test.key)
		}
	}
}

func BenchmarkEncVigenere(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	v := make([]Cipher, len(vtests))
	for i, test := range vtests {
		v[i] = NewVigenere(test.key)
		if v[i] == nil {
			b.Skip("Benchmark requires valid Vigenere test cases")
		}
	}
	b.ResetTimer()
	for j := 0; j < b.N; j++ {
		for i, test := range vtests {
			vi := v[i]
			for _, test := range test.tests {
				vi.Encode(test.source)
			}
		}
	}
}

func BenchmarkDecVigenere(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	v := make([]Cipher, len(vtests))
	for i, test := range vtests {
		v[i] = NewVigenere(test.key)
		if v[i] == nil {
			b.Skip("Benchmark requires valid Vigenere test cases")
		}
	}
	b.ResetTimer()
	for j := 0; j < b.N; j++ {
		for i, test := range vtests {
			vi := v[i]
			for _, test := range test.tests {
				vi.Decode(test.cipher)
			}
		}
	}
}


=== Initial Translation ===
// exercises/practice/simple-cipher/.meta/example.go
package cipher

import (
	"math/rand"
	"strings"
	"time"
	"unicode"
)

// Cipher interface defines methods for encoding and decoding text
type Cipher interface {
	Encode(string) string
	Decode(string) string
}

// shift implements Caesar cipher with a fixed distance
type shift struct {
	distance int
}

// vigenere implements Vigenère cipher with a keyword
type vigenere struct {
	key string
}

// NewCaesar creates a new Caesar cipher with a fixed shift of 3
func NewCaesar() Cipher {
	return NewShift(3)
}

// NewShift creates a new shift cipher with the given distance
// Returns nil for invalid shift distances (0 or outside range -25 to 25)
func NewShift(distance int) Cipher {
	if distance == 0 || distance < -25 || distance > 25 {
		return nil
	}
	return shift{distance: distance}
}

// Encode transforms plaintext to ciphertext using a shift cipher
func (c shift) Encode(input string) string {
	var result strings.Builder
	for _, char := range input {
		if unicode.IsLetter(char) {
			// Convert to lowercase and apply shift
			char = unicode.ToLower(char)
			shifted := 'a' + (char-'a'+rune(c.distance)+26)%26
			result.WriteRune(shifted)
		}
	}
	return result.String()
}

// Decode transforms ciphertext to plaintext using a shift cipher
func (c shift) Decode(input string) string {
	// Decoding is just encoding with the negative distance
	return shift{distance: -c.distance}.Encode(input)
}

// NewVigenere creates a new Vigenère cipher with the given key
// Returns nil for invalid keys (empty, containing non-letters, or all 'a')
func NewVigenere(key string) Cipher {
	if key == "" {
		return nil
	}

	allA := true
	for _, char := range key {
		if !unicode.IsLower(char) || char < 'a' || char > 'z' {
			return nil
		}
		if char != 'a' {
			allA = false
		}
	}

	if allA {
		return nil
	}

	return vigenere{key: key}
}

// Encode transforms plaintext to ciphertext using a Vigenère cipher
func (v vigenere) Encode(input string) string {
	var result strings.Builder
	keyIndex := 0

	for _, char := range input {
		if unicode.IsLetter(char) {
			// Convert to lowercase
			char = unicode.ToLower(char)
			
			// Get the current key character and its shift value
			keyChar := rune(v.key[keyIndex%len(v.key)])
			shift := keyChar - 'a'
			
			// Apply the shift
			shifted := 'a' + (char-'a'+shift)%26
			result.WriteRune(shifted)
			
			// Move to the next key character
			keyIndex++
		}
	}
	
	return result.String()
}

// Decode transforms ciphertext to plaintext using a Vigenère cipher
func (v vigenere) Decode(input string) string {
	var result strings.Builder
	keyIndex := 0

	for _, char := range input {
		if unicode.IsLetter(char) {
			// Get the current key character and its shift value
			keyChar := rune(v.key[keyIndex%len(v.key)])
			shift := keyChar - 'a'
			
			// Apply the reverse shift
			unshifted := 'a' + (char-'a'-shift+26)%26
			result.WriteRune(unshifted)
			
			// Move to the next key character
			keyIndex++
		}
	}
	
	return result.String()
}

// randomKey generates a random key of the specified length
func randomKey(length int) string {
	const letters = "abcdefghijklmnopqrstuvwxyz"
	rand.Seed(time.Now().UnixNano())
	
	var result strings.Builder
	result.Grow(length)
	
	for i := 0; i < length; i++ {
		result.WriteByte(letters[rand.Intn(len(letters))])
	}
	
	return result.String()
}

=== Initial Test Results ===
Return code: 0
=== STDOUT ===
ok  	exercism/simple-cipher	0.277s

=== STDERR ===


=== FINAL STATUS: SUCCESS ===