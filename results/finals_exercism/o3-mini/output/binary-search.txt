=== Initial Source Code ===
Source file: exercises/practice/binary-search/.meta/example.py
def find(search_list, value):
    low = 0
    high = len(search_list) - 1
    while low <= high:
        middle = (low + high) // 2
        if search_list[middle] > value:
            high = middle - 1
        elif search_list[middle] < value:
            low = middle + 1
        else:
            return middle
    raise ValueError('value not in array')


=== Source Interface ===
def find(search_list, value):
    pass


=== Target Interface ===
package binarysearch

func SearchInts(list []int, key int) int {
	panic("Please implement the SearchInts function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/binary-search/canonical-data.json
# File last updated on 2023-07-20

import unittest

from binary_search import (
    find,
)


class BinarySearchTest(unittest.TestCase):
    def test_finds_a_value_in_an_array_with_one_element(self):

        self.assertEqual(find([6], 6), 0)

    def test_finds_a_value_in_the_middle_of_an_array(self):

        self.assertEqual(find([1, 3, 4, 6, 8, 9, 11], 6), 3)

    def test_finds_a_value_at_the_beginning_of_an_array(self):

        self.assertEqual(find([1, 3, 4, 6, 8, 9, 11], 1), 0)

    def test_finds_a_value_at_the_end_of_an_array(self):

        self.assertEqual(find([1, 3, 4, 6, 8, 9, 11], 11), 6)

    def test_finds_a_value_in_an_array_of_odd_length(self):

        self.assertEqual(
            find([1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 634], 144), 9
        )

    def test_finds_a_value_in_an_array_of_even_length(self):

        self.assertEqual(find([1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 21), 5)

    def test_identifies_that_a_value_is_not_included_in_the_array(self):

        with self.assertRaises(ValueError) as err:
            find([1, 3, 4, 6, 8, 9, 11], 7)

        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "value not in array")

    def test_a_value_smaller_than_the_array_s_smallest_value_is_not_found(self):

        with self.assertRaises(ValueError) as err:
            find([1, 3, 4, 6, 8, 9, 11], 0)

        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "value not in array")

    def test_a_value_larger_than_the_array_s_largest_value_is_not_found(self):

        with self.assertRaises(ValueError) as err:
            find([1, 3, 4, 6, 8, 9, 11], 13)

        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "value not in array")

    def test_nothing_is_found_in_an_empty_array(self):

        with self.assertRaises(ValueError) as err:
            find([], 1)

        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "value not in array")

    def test_nothing_is_found_when_the_left_and_right_bounds_cross(self):

        with self.assertRaises(ValueError) as err:
            find([1, 2], 0)

        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "value not in array")


=== Target Test Code ===
//nolint:gosec // In the context of this exercise, it is fine to use math.Rand instead of crypto.Rand.
package binarysearch

import (
	"fmt"
	"math/rand"
	"testing"
)

func TestSearchInts(t *testing.T) {
	for _, test := range testCases {
		t.Run(test.description, func(t *testing.T) {
			if actual := SearchInts(test.inputList, test.inputKey); actual != test.expectedKey {
				t.Errorf("SearchInts(%#v, %d) = %d, want %d", test.inputList, test.inputKey, actual, test.expectedKey)
			}
		})
	}
}

// Benchmarks also test searching larger random slices
type query struct {
	slice []int
	x     int
}

func newQuery(n int) (query, error) {
	q := query{slice: make([]int, n)}
	for i := 0; i < n; i++ {
		q.slice[i] = i
	}
	q.x = rand.Intn(n)
	if res := SearchInts(q.slice, q.x); res != q.x {
		return q, fmt.Errorf("search of %d values gave different answer", n)
	}
	return q, nil
}

func runBenchmark(n int, b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	q, err := newQuery(n)
	if err != nil {
		b.Error(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		SearchInts(q.slice, q.x)
	}
}

func Benchmark1e2(b *testing.B) { runBenchmark(1e2, b) }
func Benchmark1e4(b *testing.B) { runBenchmark(1e4, b) }
func Benchmark1e6(b *testing.B) { runBenchmark(1e6, b) }
func Benchmark1e8(b *testing.B) { runBenchmark(1e8, b) }


=== Initial Translation ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted list of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1

	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}

	panic("value not in array")
}


=== Initial Test Results ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search_test.go:11:23: undefined: testCases


=== Retry Attempt 1 ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted list of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1
	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}
	panic("value not in array")
}

// exercises/practice/binary-search/binary_search_test.go
package binarysearch

import (
	"fmt"
	"math/rand"
	"reflect"
	"testing"
)

// testCases for SearchInts function tests.
var testCases = []struct {
	description string
	inputList   []int
	inputKey    int
	expectedKey int
}{
	{
		description: "value at beginning",
		inputList:   []int{1, 2, 3},
		inputKey:    1,
		expectedKey: 0,
	},
	{
		description: "value in middle",
		inputList:   []int{1, 2, 3},
		inputKey:    2,
		expectedKey: 1,
	},
	{
		description: "value at end",
		inputList:   []int{1, 2, 3},
		inputKey:    3,
		expectedKey: 2,
	},
	{
		description: "larger array",
		inputList:   []int{0, 2, 4, 6, 8, 10},
		inputKey:    8,
		expectedKey: 4,
	},
}

// TestSearchInts verifies the SearchInts function.
func TestSearchInts(t *testing.T) {
	for _, test := range testCases {
		t.Run(test.description, func(t *testing.T) {
			if actual := SearchInts(test.inputList, test.inputKey); actual != test.expectedKey {
				t.Errorf("SearchInts(%#v, %d) = %d, want %d", test.inputList, test.inputKey, actual, test.expectedKey)
			}
		})
	}
}

// query represents a search query for benchmark tests.
type query struct {
	slice []int
	x     int
}

// newQuery creates a query with a slice of n sorted integers and a random key from the slice.
func newQuery(n int) (query, error) {
	q := query{slice: make([]int, n)}
	for i := 0; i < n; i++ {
		q.slice[i] = i
	}
	q.x = rand.Intn(n)
	if res := SearchInts(q.slice, q.x); res != q.x {
		return q, fmt.Errorf("search of %d values gave different answer", n)
	}
	return q, nil
}

// runBenchmark executes the benchmark for a given slice size.
func runBenchmark(n int, b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	q, err := newQuery(n)
	if err != nil {
		b.Error(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		SearchInts(q.slice, q.x)
	}
}

func Benchmark1e2(b *testing.B) { runBenchmark(1e2, b) }
func Benchmark1e4(b *testing.B) { runBenchmark(1e4, b) }
func Benchmark1e6(b *testing.B) { runBenchmark(1e6, b) }
func Benchmark1e8(b *testing.B) { runBenchmark(1e8, b) }


=== Test Results (Attempt 1) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search.go:23:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 2 ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted list of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1
	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}
	panic("value not in array")
}


=== Test Results (Attempt 2) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search_test.go:11:23: undefined: testCases


=== Retry Attempt 3 ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted list of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1
	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}
	panic("value not in array")
}

// exercises/practice/binary-search/binary_search_test.go
package binarysearch

import (
	"fmt"
	"math/rand"
	"testing"
)

var testCases = []struct {
	description string
	inputList   []int
	inputKey    int
	expectedKey int
}{
	{
		description: "value at beginning",
		inputList:   []int{1, 2, 3},
		inputKey:    1,
		expectedKey: 0,
	},
	{
		description: "value in middle",
		inputList:   []int{1, 2, 3},
		inputKey:    2,
		expectedKey: 1,
	},
	{
		description: "value at end",
		inputList:   []int{1, 2, 3},
		inputKey:    3,
		expectedKey: 2,
	},
	{
		description: "larger array",
		inputList:   []int{0, 2, 4, 6, 8, 10},
		inputKey:    8,
		expectedKey: 4,
	},
}

// TestSearchInts verifies the SearchInts function.
func TestSearchInts(t *testing.T) {
	for _, test := range testCases {
		t.Run(test.description, func(t *testing.T) {
			if actual := SearchInts(test.inputList, test.inputKey); actual != test.expectedKey {
				t.Errorf("SearchInts(%#v, %d) = %d, want %d", test.inputList, test.inputKey, actual, test.expectedKey)
			}
		})
	}
}

// query represents a search query for benchmark tests.
type query struct {
	slice []int
	x     int
}

// newQuery creates a query with a slice of n sorted integers and a random key from the slice.
func newQuery(n int) (query, error) {
	q := query{slice: make([]int, n)}
	for i := 0; i < n; i++ {
		q.slice[i] = i
	}
	q.x = rand.Intn(n)
	if res := SearchInts(q.slice, q.x); res != q.x {
		return q, fmt.Errorf("search of %d values gave different answer", n)
	}
	return q, nil
}

// runBenchmark executes the benchmark for a given slice size.
func runBenchmark(n int, b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	q, err := newQuery(n)
	if err != nil {
		b.Error(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		SearchInts(q.slice, q.x)
	}
}

func Benchmark1e2(b *testing.B) { runBenchmark(1e2, b) }
func Benchmark1e4(b *testing.B) { runBenchmark(1e4, b) }
func Benchmark1e6(b *testing.B) { runBenchmark(1e6, b) }
func Benchmark1e8(b *testing.B) { runBenchmark(1e8, b) }


=== Test Results (Attempt 3) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search.go:23:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 4 ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted slice of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1
	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}
	panic("value not in array")
}


=== Test Results (Attempt 4) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search_test.go:11:23: undefined: testCases


=== Retry Attempt 5 ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted slice of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1
	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}
	panic("value not in array")
}


=== Test Results (Attempt 5) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search_test.go:11:23: undefined: testCases


=== Retry Attempt 6 ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted slice of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1
	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}
	panic("value not in array")
}


=== Test Results (Attempt 6) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search_test.go:11:23: undefined: testCases


=== Retry Attempt 7 ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted slice of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1
	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}
	panic("value not in array")
}


=== Test Results (Attempt 7) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search_test.go:11:23: undefined: testCases


=== Retry Attempt 8 ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted slice of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1
	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}
	panic("value not in array")
}


=== Test Results (Attempt 8) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search_test.go:11:23: undefined: testCases


=== Retry Attempt 9 ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted slice of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1
	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}
	panic("value not in array")
}


=== Test Results (Attempt 9) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search_test.go:11:23: undefined: testCases


=== Retry Attempt 10 ===
// exercises/practice/binary-search/.meta/example.go
package binarysearch

// SearchInts performs binary search in a sorted slice of integers and returns the index of the key.
// It panics if the key is not found in the slice.
func SearchInts(list []int, key int) int {
	low := 0
	high := len(list) - 1
	for low <= high {
		middle := (low + high) / 2
		if list[middle] > key {
			high = middle - 1
		} else if list[middle] < key {
			low = middle + 1
		} else {
			return middle
		}
	}
	panic("value not in array")
}


=== Test Results (Attempt 10) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/binary-search [build failed]
FAIL

=== STDERR ===
# exercism/binary-search [exercism/binary-search.test]
./binary_search_test.go:11:23: undefined: testCases


=== FINAL STATUS: FAILED ===