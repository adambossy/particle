=== Initial Source Code ===
Source file: exercises/practice/acronym/.meta/example.py
import re


def abbreviate(words):
    regex = "[A-Z]+['a-z]*|['a-z]+"
    return ''.join(word[0].upper() for word in re.findall(regex, words))


=== Source Interface ===
def abbreviate(words):
    pass


=== Target Interface ===
// This is a "stub" file.  It's a little start on your solution.
// It's not a complete solution though; you have to write some code.

// Package acronym should have a package comment that summarizes what it's about.
// https://golang.org/doc/effective_go.html#commentary
package acronym

// Abbreviate should have a comment documenting it.
func Abbreviate(s string) string {
	// Write some code here to pass the test suite.
	// Then remove all the stock comments.
	// They're here to help you get started but they only clutter a finished solution.
	// If you leave them in, reviewers may protest!
	return ""
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/acronym/canonical-data.json
# File last updated on 2023-07-20

import unittest

from acronym import (
    abbreviate,
)


class AcronymTest(unittest.TestCase):
    def test_basic(self):
        self.assertEqual(abbreviate("Portable Network Graphics"), "PNG")

    def test_lowercase_words(self):
        self.assertEqual(abbreviate("Ruby on Rails"), "ROR")

    def test_punctuation(self):
        self.assertEqual(abbreviate("First In, First Out"), "FIFO")

    def test_all_caps_word(self):
        self.assertEqual(abbreviate("GNU Image Manipulation Program"), "GIMP")

    def test_punctuation_without_whitespace(self):
        self.assertEqual(abbreviate("Complementary metal-oxide semiconductor"), "CMOS")

    def test_very_long_abbreviation(self):
        self.assertEqual(
            abbreviate(
                "Rolling On The Floor Laughing So Hard That My Dogs Came Over And Licked Me"
            ),
            "ROTFLSHTMDCOALM",
        )

    def test_consecutive_delimiters(self):
        self.assertEqual(abbreviate("Something - I made up from thin air"), "SIMUFTA")

    def test_apostrophes(self):
        self.assertEqual(abbreviate("Halley's Comet"), "HC")

    def test_underscore_emphasis(self):
        self.assertEqual(abbreviate("The Road _Not_ Taken"), "TRNT")


=== Target Test Code ===
package acronym

import (
	"testing"
)

func TestAcronym(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			actual := Abbreviate(tc.input)
			if actual != tc.expected {
				t.Errorf("Abbreviate(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkAcronym(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, test := range testCases {
			Abbreviate(test.input)
		}
	}
}


=== Initial Translation ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the provided phrase.
// It extracts groups from the phrase using a regular expression and returns a string
// composed of the uppercase first letters of each group.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}


=== Initial Test Results ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym_test.go:8:21: undefined: testCases
./acronym_test.go:23:24: undefined: testCases


=== Retry Attempt 1 ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the provided phrase.
// It extracts parts of the phrase using a regular expression and returns a string
// composed of the uppercase first letters of each extracted part.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}

// exercises/practice/acronym/.meta/acronym_test.go
package acronym

import (
	"testing"
)

// testCase defines a struct for acronym test cases.
var testCases = []struct {
	description string
	input       string
	expected   string
}{
	{
		description: "Basic example",
		input:       "Portable Network Graphics",
		expected:   "PNG",
	},
	{
		description: "Lowercase words with hyphen",
		input:       "Complementary metal-oxide semiconductor",
		expected:   "CMOS",
	},
	{
		description: "Words with punctuation",
		input:       "Ruby on Rails",
		expected:   "ROR",
	},
	{
		description: "Single word",
		input:       "PHP",
		expected:   "P",
	},
}

func TestAcronym(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			actual := Abbreviate(tc.input)
			if actual != tc.expected {
				t.Errorf("Abbreviate(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkAcronym(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			_ = Abbreviate(tc.input)
		}
	}
}


=== Test Results (Attempt 1) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym.go:27:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 2 ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the provided phrase.
// It extracts parts of the phrase using a regular expression and returns a string
// composed of the uppercase first letters of each extracted part.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}

// exercises/practice/acronym/.meta/acronym_test.go
// Note: This file should be placed in a separate file named acronym_test.go
// and is used to test the implementation in example.go.
package acronym

import "testing"

// testCases defines a set of test cases for the Abbreviate function.
var testCases = []struct {
	description string
	input       string
	expected   string
}{
	{
		description: "Basic example",
		input:       "Portable Network Graphics",
		expected:   "PNG",
	},
	{
		description: "Lowercase words with hyphen",
		input:       "Complementary metal-oxide semiconductor",
		expected:   "CMOS",
	},
	{
		description: "Words with punctuation",
		input:       "Ruby on Rails",
		expected:   "ROR",
	},
	{
		description: "Single word",
		input:       "PHP",
		expected:   "P",
	},
}

func TestAcronym(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			actual := Abbreviate(tc.input)
			if actual != tc.expected {
				t.Errorf("Abbreviate(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkAcronym(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			_ = Abbreviate(tc.input)
		}
	}
}


=== Test Results (Attempt 2) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym.go:29:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 3 ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the given phrase.
// It extracts parts of the phrase via a regular expression and returns a string
// composed of the uppercase first letters of each extracted part.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}


=== Test Results (Attempt 3) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym_test.go:8:21: undefined: testCases
./acronym_test.go:23:24: undefined: testCases


=== Retry Attempt 4 ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the given phrase.
// It extracts parts of the phrase using a regular expression and returns a string
// composed of the uppercase first letters of each extracted part.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}


=== Test Results (Attempt 4) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym_test.go:8:21: undefined: testCases
./acronym_test.go:23:24: undefined: testCases


=== Retry Attempt 5 ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the given phrase.
// It extracts words using a regular expression and returns a string
// composed of the uppercase first letters of each word.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}

// exercises/practice/acronym/.meta/acronym_test.go
package acronym

import "testing"

// testCases defines a set of test cases for the Abbreviate function.
var testCases = []struct {
	description string
	input       string
	expected   string
}{
	{
		description: "Basic example",
		input:       "Portable Network Graphics",
		expected:   "PNG",
	},
	{
		description: "Lowercase words with hyphen",
		input:       "Complementary metal-oxide semiconductor",
		expected:   "CMOS",
	},
	{
		description: "Words with punctuation",
		input:       "Ruby on Rails",
		expected:   "ROR",
	},
	{
		description: "Single word - uppercase remains unchanged",
		input:       "PHP",
		expected:   "P",
	},
}

func TestAcronym(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			actual := Abbreviate(tc.input)
			if actual != tc.expected {
				t.Errorf("Abbreviate(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkAcronym(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			_ = Abbreviate(tc.input)
		}
	}
}


=== Test Results (Attempt 5) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym.go:27:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 6 ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the given phrase.
// It extracts words from the phrase using a regular expression and returns a string
// composed of the uppercase first letters of each word.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}


=== Test Results (Attempt 6) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym_test.go:8:21: undefined: testCases
./acronym_test.go:23:24: undefined: testCases


=== Retry Attempt 7 ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the given phrase.
// It extracts words from the phrase using a regular expression and returns a string
// composed of the uppercase first letters of each word.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}


=== Test Results (Attempt 7) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym_test.go:8:21: undefined: testCases
./acronym_test.go:23:24: undefined: testCases


=== Retry Attempt 8 ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the given phrase.
// It extracts words from the phrase using a regular expression and returns a string
// composed of the uppercase first letters of each word.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}


=== Test Results (Attempt 8) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym_test.go:8:21: undefined: testCases
./acronym_test.go:23:24: undefined: testCases


=== Retry Attempt 9 ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the given phrase.
// It extracts words from the phrase using a regular expression and returns a string
// composed of the uppercase first letters of each word.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}


=== Test Results (Attempt 9) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym_test.go:8:21: undefined: testCases
./acronym_test.go:23:24: undefined: testCases


=== Retry Attempt 10 ===
// exercises/practice/acronym/.meta/example.go
package acronym

import (
	"regexp"
	"strings"
)

// Abbreviate returns the abbreviated version of the given phrase.
// It extracts words from the phrase using a regular expression and returns a string
// composed of the uppercase first letters of each word.
func Abbreviate(s string) string {
	re := regexp.MustCompile(`[A-Z]+['a-z]*|['a-z]+`)
	words := re.FindAllString(s, -1)

	var builder strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			builder.WriteString(strings.ToUpper(word[:1]))
		}
	}

	return builder.String()
}

// exercises/practice/acronym/.meta/acronym_test.go
// NOTE: This file should be placed in a separate file named acronym_test.go
// and is used to test the implementation in example.go.
package acronym

import (
	"testing"
)

// testCases defines a set of test cases for the Abbreviate function.
var testCases = []struct {
	description string
	input       string
	expected   string
}{
	{
		description: "Basic example",
		input:       "Portable Network Graphics",
		expected:   "PNG",
	},
	{
		description: "Lowercase words with hyphen",
		input:       "Complementary metal-oxide semiconductor",
		expected:   "CMOS",
	},
	{
		description: "Words with punctuation",
		input:       "Ruby on Rails",
		expected:   "ROR",
	},
	{
		description: "Single word - uppercase remains unchanged",
		input:       "PHP",
		expected:   "P",
	},
}

func TestAcronym(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			actual := Abbreviate(tc.input)
			if actual != tc.expected {
				t.Errorf("Abbreviate(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkAcronym(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			_ = Abbreviate(tc.input)
		}
	}
}


=== Test Results (Attempt 10) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/acronym [build failed]
FAIL

=== STDERR ===
# exercism/acronym [exercism/acronym.test]
./acronym.go:29:1: syntax error: non-declaration statement outside function body


=== FINAL STATUS: FAILED ===