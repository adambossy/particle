=== Initial Source Code ===
Source file: exercises/practice/matrix/.meta/example.py
class Matrix:
    def __init__(self, matrix_string):
        self.rows = [[int(number) for number in row.split()]
                     for row in matrix_string.split('\n')]
        self.columns = [list(tup) for tup in zip(*self.rows)]

    def row(self, index):
        return self.rows[index - 1]

    def column(self, index):
        return self.columns[index - 1]


=== Source Interface ===
class Matrix:
    def __init__(self, matrix_string):
        pass

    def row(self, index):
        pass

    def column(self, index):
        pass


=== Target Interface ===
package matrix

// Define the Matrix type here.

func New(s string) (Matrix, error) {
	panic("Please implement the New function")
}

// Cols and Rows must return the results without affecting the matrix.
func (m Matrix) Cols() [][]int {
	panic("Please implement the Cols function")
}

func (m Matrix) Rows() [][]int {
	panic("Please implement the Rows function")
}

func (m Matrix) Set(row, col, val int) bool {
	panic("Please implement the Set function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/matrix/canonical-data.json
# File last updated on 2023-07-19

import unittest

from matrix import (
    Matrix,
)


class MatrixTest(unittest.TestCase):
    def test_extract_row_from_one_number_matrix(self):
        matrix = Matrix("1")
        self.assertEqual(matrix.row(1), [1])

    def test_can_extract_row(self):
        matrix = Matrix("1 2\n3 4")
        self.assertEqual(matrix.row(2), [3, 4])

    def test_extract_row_where_numbers_have_different_widths(self):
        matrix = Matrix("1 2\n10 20")
        self.assertEqual(matrix.row(2), [10, 20])

    def test_can_extract_row_from_non_square_matrix_with_no_corresponding_column(self):
        matrix = Matrix("1 2 3\n4 5 6\n7 8 9\n8 7 6")
        self.assertEqual(matrix.row(4), [8, 7, 6])

    def test_extract_column_from_one_number_matrix(self):
        matrix = Matrix("1")
        self.assertEqual(matrix.column(1), [1])

    def test_can_extract_column(self):
        matrix = Matrix("1 2 3\n4 5 6\n7 8 9")
        self.assertEqual(matrix.column(3), [3, 6, 9])

    def test_can_extract_column_from_non_square_matrix_with_no_corresponding_row(self):
        matrix = Matrix("1 2 3 4\n5 6 7 8\n9 8 7 6")
        self.assertEqual(matrix.column(4), [4, 8, 6])

    def test_extract_column_where_numbers_have_different_widths(self):
        matrix = Matrix("89 1903 3\n18 3 1\n9 4 800")
        self.assertEqual(matrix.column(2), [1903, 3, 4])


=== Target Test Code ===
package matrix

import (
	"reflect"
	"testing"
)

type testCase struct {
	description string
	in          string
	ok          bool
	rows        [][]int
	cols        [][]int
}

var validTestCases = []testCase{
	{
		description: "2 rows, 2 columns",
		in:          "1 2\n10 20",
		ok:          true,
		rows: [][]int{
			{1, 2},
			{10, 20},
		},
		cols: [][]int{
			{1, 10},
			{2, 20},
		},
	},
	{
		description: "2 rows, 2 columns",
		in:          "9 7\n8 6",
		ok:          true,
		rows: [][]int{
			{9, 7},
			{8, 6},
		},
		cols: [][]int{
			{9, 8},
			{7, 6},
		},
	},
	{
		description: "2 rows, 3 columns",
		in:          "9 8 7\n19 18 17",
		ok:          true,
		rows: [][]int{
			{9, 8, 7},
			{19, 18, 17},
		},
		cols: [][]int{
			{9, 19},
			{8, 18},
			{7, 17},
		},
	},
	{
		description: "2 rows, 3 columns",
		in:          "1 4 9\n16 25 36",
		ok:          true,
		rows: [][]int{
			{1, 4, 9},
			{16, 25, 36},
		},
		cols: [][]int{
			{1, 16},
			{4, 25},
			{9, 36},
		},
	},
	{
		description: "4 rows, 3 columns",
		in:          "1 2 3\n4 5 6\n7 8 9\n 8 7 6",
		ok:          true,
		rows: [][]int{
			{1, 2, 3},
			{4, 5, 6},
			{7, 8, 9},
			{8, 7, 6},
		},
		cols: [][]int{
			{1, 4, 7, 8},
			{2, 5, 8, 7},
			{3, 6, 9, 6},
		},
	},
	{
		description: "3 rows, 3 columns",
		in:          "89 1903 3\n18 3 1\n9 4 800",
		ok:          true,
		rows: [][]int{
			{89, 1903, 3},
			{18, 3, 1},
			{9, 4, 800},
		},
		cols: [][]int{
			{89, 18, 9},
			{1903, 3, 4},
			{3, 1, 800},
		},
	},
	{
		description: "1 row, 3 columns",
		in:          "1 2 3",
		ok:          true,
		rows: [][]int{
			{1, 2, 3},
		},
		cols: [][]int{
			{1},
			{2},
			{3},
		},
	},
	{
		description: "3 rows, 1 column",
		in:          "1\n2\n3",
		ok:          true,
		rows: [][]int{
			{1},
			{2},
			{3},
		},
		cols: [][]int{
			{1, 2, 3},
		},
	},
	{
		description: "1 row, 1 column",
		in:          "0",
		ok:          true,
		rows: [][]int{
			{0},
		},
		cols: [][]int{
			{0},
		},
	},
	// undefined
	// {"\n\n", // valid?, 3 rows, 0 columns
	// {"",     // valid?, 0 rows, 0 columns
}

var invalidTestCases = []testCase{
	{description: "int64 overflow", in: "9223372036854775808", ok: false, rows: nil, cols: nil},
	{description: "uneven rows", in: "1 2\n10 20 30", ok: false, rows: nil, cols: nil},
	{description: "first row empty", in: "\n3 4\n5 6", ok: false, rows: nil, cols: nil},
	{description: "middle row empty", in: "1 2\n\n5 6", ok: false, rows: nil, cols: nil},
	{description: "last row empty", in: "1 2\n3 4\n", ok: false, rows: nil, cols: nil},
	{description: "non integer", in: "2.7", ok: false, rows: nil, cols: nil},
	{description: "non numeric", in: "cat", ok: false, rows: nil, cols: nil},
}

func TestNew(t *testing.T) {
	for _, tc := range append(validTestCases, invalidTestCases...) {
		t.Run(tc.description, func(t *testing.T) {
			got, err := New(tc.in)
			switch {
			case !tc.ok:
				if err == nil {
					t.Fatalf("New(%q) expected error, got: %v", tc.in, got)
				}
			case err != nil:
				t.Fatalf("New(%q) returned error %q.  Error not expected", tc.in, err)
			case got == nil:
				t.Fatalf("New(%q) = %v, want non-nil *Matrix", tc.in, got)
			}
		})
	}
}

func TestRows(t *testing.T) {
	for _, tc := range validTestCases {
		t.Run(tc.description, func(t *testing.T) {
			got, err := New(tc.in)
			if err != nil {
				t.Fatalf("error in test setup: TestRows needs working New and valid matrix")
			}
			rows := got.Rows()
			if len(rows) == 0 && len(tc.rows) == 0 {
				return // agreement, and nothing more to test
			}
			if !reflect.DeepEqual(rows, tc.rows) {
				t.Fatalf("New(%q).Rows() = %v (type %T), want: %v (type %T)", tc.in, rows, rows, tc.rows, tc.rows)
			}
			if len(rows[0]) == 0 {
				return // not currently in test data, but anyway
			}
			rows[0][0]++
			if !reflect.DeepEqual(got.Rows(), tc.rows) {
				t.Fatalf("Matrix.Rows() returned slice based on Matrix representation. Want independent copy of element data.")
			}
		})
	}
}

func TestCols(t *testing.T) {
	for _, tc := range validTestCases {
		t.Run(tc.description, func(t *testing.T) {
			m, err := New(tc.in)
			if err != nil {
				t.Fatalf("error in test setup: TestCols needs working New and valid matrix")
			}
			cols := m.Cols()
			if len(cols) == 0 && len(tc.cols) == 0 {
				return // agreement, and nothing more to test
			}
			if !reflect.DeepEqual(cols, tc.cols) {
				t.Fatalf("New(%q).Cols() = %v (type %T), want: %v (type %T)", tc.in, cols, cols, tc.cols, tc.cols)
			}
			if len(cols[0]) == 0 {
				return // not currently in test data, but anyway
			}
			cols[0][0]++
			if !reflect.DeepEqual(m.Cols(), tc.cols) {
				t.Fatalf("Matrix.Cols() returned slice based on Matrix representation. Want independent copy of element data.")
			}
		})
	}
}

func TestSet(t *testing.T) {
	s := "1 2 3\n4 5 6\n7 8 9"
	m, err := New(s)
	if err != nil {
		t.Fatalf("error in test setup: TestSet needs working New and valid matrix")
	}
	xr := [][]int{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}
	if !reflect.DeepEqual(m.Rows(), xr) {
		t.Fatalf("error in test setup: TestSet needs working Rows")
	}
	xc := [][]int{{1, 4, 7}, {2, 5, 8}, {3, 6, 9}}
	if !reflect.DeepEqual(m.Cols(), xc) {
		t.Fatalf("error in test setup: TestSet needs working Cols and valid matrix")
	}
	// test each corner, each side, and an interior element
	for r := 0; r < 3; r++ {
		for c := 0; c < 3; c++ {
			m, _ = New(s)
			val := 10 + r*3 + c
			if ok := m.Set(r, c, val); !ok {
				t.Fatalf("Matrix(%q).Set(%d, %d, %d) returned !ok, want ok.",
					s, r, c, val)
			}
			xr = [][]int{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}
			xc = [][]int{{1, 4, 7}, {2, 5, 8}, {3, 6, 9}}
			xr[r][c] = val
			xc[c][r] = val
			if res := m.Rows(); !reflect.DeepEqual(res, xr) {
				t.Fatalf("Matrix(%q).Set(%d, %d, %d), Rows() = %v, want %v",
					s, r, c, val, res, xr)
			}
			if res := m.Cols(); !reflect.DeepEqual(res, xc) {
				t.Fatalf("Matrix(%q).Set(%d, %d, %d), Cols() = %v, want %v",
					s, r, c, val, res, xc)
			}
		}
	}
	// test 1 and 2 off each corner and side
	m, _ = New(s)
	for _, r := range []int{-2, -1, 0, 3, 4} {
		for _, c := range []int{-2, -1, 0, 3, 4} {
			if r == 0 && c == 0 {
				continue
			}
			if ok := m.Set(r, c, 0); ok {
				t.Fatalf("Matrix(%q).Set(%d, %d, 0) = ok, want !ok", s, r, c)
			}
		}
	}
}

func BenchmarkNew(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	var matrix Matrix
	for i := 0; i < b.N; i++ {
		var err error
		matrix, err = New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14")
		if err != nil {
			b.Fatalf("Failed to create the matrix: %v", err)
		}
	}
	if matrix == nil {
		b.Fatalf("No matrix parsed")
	}
}

func BenchmarkRows(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	matrix, err := New("1 2 3\n4 5 6\n7 8 9\n 8 7 6")
	if err != nil {
		b.Fatalf("Failed to create the matrix: %v", err)
	}
	b.ResetTimer()
	var rows [][]int
	for i := 0; i < b.N; i++ {
		rows = matrix.Rows()
	}
	if len(rows) != 4 {
		b.Fatalf("Incorrect number of rows returned: %v", rows)
	}
}

func BenchmarkCols(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	matrix, err := New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14")
	if err != nil {
		b.Fatalf("Failed to create the matrix: %v", err)
	}
	b.ResetTimer()
	var cols [][]int
	for i := 0; i < b.N; i++ {
		cols = matrix.Cols()
	}
	if len(cols) != 5 {
		b.Fatalf("Incorrect number of columns returned: %v", cols)
	}
}


=== Initial Translation ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both row and column representations of the matrix.
// Note: The matrix uses 1-indexing in its exported Set method, matching the Python implementation semantics.
type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Example input:
// "1 2 3\n4 5 6\n7 8 9"
func New(s string) (Matrix, error) {
	var m Matrix
	lines := strings.Split(s, "\n")
	for _, line := range lines {
		// Trim the line and check if it's empty
		if len(strings.TrimSpace(line)) == 0 {
			continue
		}
		tokens := strings.Fields(line)
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return m, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return m, nil
	}

	// Ensure all rows have the same number of elements
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return m, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// This mirrors the behavior of the Python row(index) method, albeit the Python version uses 1-indexing.
// In this implementation, Rows returns all rows so that modifications to the returned slice do not affect the underlying matrix.
func (m Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// This mirrors the behavior of the Python column(index) method, albeit the Python version uses 1-indexing.
func (m Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the given row and column in the matrix and returns true if the update was successful.
// The rows and columns are 1-indexed. If either index is out of range, Set returns false and does nothing.
func (m *Matrix) Set(row, col, val int) bool {
	if row < 1 || row > len(m.rows) {
		return false
	}
	if col < 1 || len(m.rows) == 0 || col > len(m.rows[0]) {
		return false
	}
	// Update the appropriate cell in rows and columns
	m.rows[row-1][col-1] = val
	m.columns[col-1][row-1] = val
	return true
}


=== Initial Test Results ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:165:16: invalid operation: got == nil (mismatched types Matrix and untyped nil)
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== Retry Attempt 1 ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both the row and column representations of the matrix.
// Rows and columns are 0-indexed.

type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Returns a pointer to a Matrix and an error, if any.
func New(s string) (*Matrix, error) {
	m := &Matrix{}
	lines := strings.Split(s, "\n")

	// Parse the rows
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			return nil, errors.New("empty row encountered")
		}
		tokens := strings.Fields(line)
		if len(tokens) == 0 {
			return nil, errors.New("empty row encountered")
		}
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return nil, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return nil, errors.New("no rows found")
	}

	// Ensure all rows have the same length
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return nil, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// Modifications to the returned value will not affect the underlying matrix.
func (m *Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// Modifications to the returned value will not affect the underlying matrix.
func (m *Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the specified (row, col) in the matrix with val.
// The rows and columns are 0-indexed. It returns true if the update was successful, false otherwise.
func (m *Matrix) Set(row, col, val int) bool {
	if m == nil {
		return false
	}
	if row < 0 || row >= len(m.rows) {
		return false
	}
	if col < 0 || (len(m.rows) > 0 && col >= len(m.rows[0])) {
		return false
	}
	m.rows[row][col] = val
	m.columns[col][row] = val
	return true
}


=== Test Results (Attempt 1) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:280:17: cannot use New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14") (value of type *Matrix) as type Matrix in assignment
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== Retry Attempt 2 ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both the row and column representations of the matrix.
// Rows and columns are 0-indexed.

type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Returns a Matrix and an error, if any.
func New(s string) (Matrix, error) {
	var m Matrix
	lines := strings.Split(s, "\n")

	// Parse the rows
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			return Matrix{}, errors.New("empty row encountered")
		}
		tokens := strings.Fields(line)
		if len(tokens) == 0 {
			return Matrix{}, errors.New("empty row encountered")
		}
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return Matrix{}, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return Matrix{}, errors.New("no rows found")
	}

	// Ensure all rows have the same length
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return Matrix{}, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// Modifications to the returned slice will not affect the underlying matrix.
func (m Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// Modifications to the returned slice will not affect the underlying matrix.
func (m Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the specified (row, col) in the matrix with val.
// The rows and columns are 0-indexed. It returns true if the update was successful, false otherwise.
func (m *Matrix) Set(row, col, val int) bool {
	if m == nil {
		return false
	}
	if row < 0 || row >= len(m.rows) {
		return false
	}
	if col < 0 || (len(m.rows) > 0 && col >= len(m.rows[0])) {
		return false
	}
	m.rows[row][col] = val
	m.columns[col][row] = val
	return true
}


=== Test Results (Attempt 2) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:165:16: invalid operation: got == nil (mismatched types Matrix and untyped nil)
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== Retry Attempt 3 ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both the row and column representations of the matrix.
// Rows and columns are 0-indexed.
// The Matrix is immutable with respect to the copies returned by Rows() and Cols().
// Use Set to update the matrix values.

type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Returns a pointer to a Matrix and an error, if any.
func New(s string) (*Matrix, error) {
	m := &Matrix{}
	lines := strings.Split(s, "\n")

	// Parse the rows
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			return nil, errors.New("empty row encountered")
		}
		tokens := strings.Fields(line)
		if len(tokens) == 0 {
			return nil, errors.New("empty row encountered")
		}
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return nil, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return nil, errors.New("no rows found")
	}

	// Ensure all rows have the same length
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return nil, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the specified (row, col) in the matrix with val.
// The rows and columns are 0-indexed. It returns true if the update was successful, false otherwise.
func (m *Matrix) Set(row, col, val int) bool {
	if m == nil {
		return false
	}
	if row < 0 || row >= len(m.rows) {
		return false
	}
	if col < 0 || (len(m.rows) > 0 && col >= len(m.rows[0])) {
		return false
	}
	m.rows[row][col] = val
	m.columns[col][row] = val
	return true
}


=== Test Results (Attempt 3) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:280:17: cannot use New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14") (value of type *Matrix) as type Matrix in assignment
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== Retry Attempt 4 ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both the row and column representations of the matrix.
// Rows and columns are 0-indexed.
// The Matrix value can be updated with Set, and Rows() and Cols() return deep copies.

type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Returns a pointer to a Matrix and an error, if any.
func New(s string) (*Matrix, error) {
	m := &Matrix{}
	lines := strings.Split(s, "\n")

	// Parse the rows
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			return nil, errors.New("empty row encountered")
		}
		tokens := strings.Fields(line)
		if len(tokens) == 0 {
			return nil, errors.New("empty row encountered")
		}
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return nil, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return nil, errors.New("no rows found")
	}

	// Ensure all rows have the same length
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return nil, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the specified (row, col) in the matrix with val.
// The rows and columns are 0-indexed. It returns true if the update was successful, false otherwise.
func (m *Matrix) Set(row, col, val int) bool {
	if m == nil {
		return false
	}
	if row < 0 || row >= len(m.rows) {
		return false
	}
	if col < 0 || (len(m.rows) > 0 && col >= len(m.rows[0])) {
		return false
	}
	m.rows[row][col] = val
	m.columns[col][row] = val
	return true
}


=== Test Results (Attempt 4) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:280:17: cannot use New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14") (value of type *Matrix) as type Matrix in assignment
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== Retry Attempt 5 ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both the row and column representations of the matrix.
// Rows and columns are 0-indexed.
// The Matrix value can be updated with Set, and Rows() and Cols() return deep copies.

type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Returns a pointer to a Matrix and an error, if any.
func New(s string) (*Matrix, error) {
	m := &Matrix{}
	lines := strings.Split(s, "\n")

	// Parse the rows
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			return nil, errors.New("empty row encountered")
		}
		tokens := strings.Fields(line)
		if len(tokens) == 0 {
			return nil, errors.New("empty row encountered")
		}
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return nil, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return nil, errors.New("no rows found")
	}

	// Ensure all rows have the same length
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return nil, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the specified (row, col) in the matrix with val.
// The rows and columns are 0-indexed. It returns true if the update was successful, false otherwise.
func (m *Matrix) Set(row, col, val int) bool {
	if m == nil {
		return false
	}
	if row < 0 || row >= len(m.rows) {
		return false
	}
	if col < 0 || (len(m.rows) > 0 && col >= len(m.rows[0])) {
		return false
	}
	m.rows[row][col] = val
	m.columns[col][row] = val
	return true
}


=== Test Results (Attempt 5) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:280:17: cannot use New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14") (value of type *Matrix) as type Matrix in assignment
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== Retry Attempt 6 ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both the row and column representations of the matrix.
// Rows and columns are 0-indexed.
// The Matrix value can be updated with Set, and Rows() and Cols() return deep copies.

type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Returns a pointer to a Matrix and an error, if any.
func New(s string) (*Matrix, error) {
	m := &Matrix{}
	lines := strings.Split(s, "\n")

	// Parse the rows
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			return nil, errors.New("empty row encountered")
		}
		tokens := strings.Fields(line)
		if len(tokens) == 0 {
			return nil, errors.New("empty row encountered")
		}
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return nil, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return nil, errors.New("no rows found")
	}

	// Ensure all rows have the same length
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return nil, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the specified (row, col) in the matrix with val.
// The rows and columns are 0-indexed. It returns true if the update was successful, false otherwise.
func (m *Matrix) Set(row, col, val int) bool {
	if m == nil {
		return false
	}
	if row < 0 || row >= len(m.rows) {
		return false
	}
	if col < 0 || (len(m.rows) > 0 && col >= len(m.rows[0])) {
		return false
	}
	m.rows[row][col] = val
	m.columns[col][row] = val
	return true
}


=== Test Results (Attempt 6) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:280:17: cannot use New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14") (value of type *Matrix) as type Matrix in assignment
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== Retry Attempt 7 ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both the row and column representations of the matrix.
// Rows and columns are 0-indexed.
// The Matrix value can be updated with Set, and Rows() and Cols() return deep copies.

type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Returns a pointer to a Matrix and an error, if any.
func New(s string) (*Matrix, error) {
	m := &Matrix{}
	lines := strings.Split(s, "\n")

	// Parse the rows
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			return nil, errors.New("empty row encountered")
		}
		tokens := strings.Fields(line)
		if len(tokens) == 0 {
			return nil, errors.New("empty row encountered")
		}
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return nil, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return nil, errors.New("no rows found")
	}

	// Ensure all rows have the same length
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return nil, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the specified (row, col) in the matrix with val.
// The rows and columns are 0-indexed. It returns true if the update was successful, false otherwise.
func (m *Matrix) Set(row, col, val int) bool {
	if m == nil {
		return false
	}
	if row < 0 || row >= len(m.rows) {
		return false
	}
	if col < 0 || (len(m.rows) > 0 && col >= len(m.rows[0])) {
		return false
	}
	m.rows[row][col] = val
	m.columns[col][row] = val
	return true
}


=== Test Results (Attempt 7) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:280:17: cannot use New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14") (value of type *Matrix) as type Matrix in assignment
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== Retry Attempt 8 ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both the row and column representations of the matrix.
// Rows and columns are 0-indexed.
// The Matrix value can be updated with Set, and Rows() and Cols() return deep copies.

type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Returns a pointer to a Matrix and an error, if any.
func New(s string) (*Matrix, error) {
	m := &Matrix{}
	lines := strings.Split(s, "\n")

	// Parse the rows
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			return nil, errors.New("empty row encountered")
		}
		tokens := strings.Fields(line)
		if len(tokens) == 0 {
			return nil, errors.New("empty row encountered")
		}
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return nil, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return nil, errors.New("no rows found")
	}

	// Ensure all rows have the same length
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return nil, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the specified (row, col) in the matrix with val.
// The rows and columns are 0-indexed. It returns true if the update was successful, false otherwise.
func (m *Matrix) Set(row, col, val int) bool {
	if m == nil {
		return false
	}
	if row < 0 || row >= len(m.rows) {
		return false
	}
	if col < 0 || (len(m.rows) > 0 && col >= len(m.rows[0])) {
		return false
	}
	m.rows[row][col] = val
	m.columns[col][row] = val
	return true
}


=== Test Results (Attempt 8) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:280:17: cannot use New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14") (value of type *Matrix) as type Matrix in assignment
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== Retry Attempt 9 ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both the row and column representations of the matrix.
// Rows and columns are 0-indexed.
// The Matrix value can be updated with Set, and Rows() and Cols() return deep copies.

type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Returns a pointer to a Matrix and an error, if any.
func New(s string) (*Matrix, error) {
	m := &Matrix{}
	lines := strings.Split(s, "\n")

	// Parse the rows
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			return nil, errors.New("empty row encountered")
		}
		tokens := strings.Fields(line)
		if len(tokens) == 0 {
			return nil, errors.New("empty row encountered")
		}
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return nil, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return nil, errors.New("no rows found")
	}

	// Ensure all rows have the same length
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return nil, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the specified (row, col) in the matrix with val.
// The rows and columns are 0-indexed. It returns true if the update was successful, false otherwise.
func (m *Matrix) Set(row, col, val int) bool {
	if m == nil {
		return false
	}
	if row < 0 || row >= len(m.rows) {
		return false
	}
	if col < 0 || (len(m.rows) > 0 && col >= len(m.rows[0])) {
		return false
	}
	m.rows[row][col] = val
	m.columns[col][row] = val
	return true
}


=== Test Results (Attempt 9) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:280:17: cannot use New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14") (value of type *Matrix) as type Matrix in assignment
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== Retry Attempt 10 ===
// exercises/practice/matrix/.meta/example.go
package matrix

import (
	"errors"
	"strconv"
	"strings"
)

// Matrix represents a matrix with rows and columns.
// It caches both the row and column representations of the matrix.
// Rows and columns are 0-indexed.
// The Matrix value can be updated with Set, and Rows() and Cols() return deep copies.

type Matrix struct {
	rows    [][]int
	columns [][]int
}

// New creates a Matrix from a string representation.
// The input string should have rows separated by newline characters,
// and each row should have numbers separated by spaces.
// Returns a pointer to a Matrix and an error, if any.
func New(s string) (*Matrix, error) {
	m := &Matrix{}
	lines := strings.Split(s, "\n")

	// Parse the rows
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			return nil, errors.New("empty row encountered")
		}
		tokens := strings.Fields(line)
		if len(tokens) == 0 {
			return nil, errors.New("empty row encountered")
		}
		row := make([]int, 0, len(tokens))
		for _, token := range tokens {
			num, err := strconv.Atoi(token)
			if err != nil {
				return nil, errors.New("invalid number in matrix string")
			}
			row = append(row, num)
		}
		m.rows = append(m.rows, row)
	}

	if len(m.rows) == 0 {
		return nil, errors.New("no rows found")
	}

	// Ensure all rows have the same length
	rowLen := len(m.rows[0])
	for _, r := range m.rows {
		if len(r) != rowLen {
			return nil, errors.New("rows have inconsistent lengths")
		}
	}

	// Build the columns by transposing the rows
	m.columns = make([][]int, rowLen)
	for i := 0; i < rowLen; i++ {
		col := make([]int, len(m.rows))
		for j, r := range m.rows {
			col[j] = r[i]
		}
		m.columns[i] = col
	}

	return m, nil
}

// Rows returns a deep copy of the matrix rows.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Rows() [][]int {
	result := make([][]int, len(m.rows))
	for i, row := range m.rows {
		result[i] = make([]int, len(row))
		copy(result[i], row)
	}
	return result
}

// Cols returns a deep copy of the matrix columns.
// Modifications to the returned slice will not affect the underlying matrix.
func (m *Matrix) Cols() [][]int {
	result := make([][]int, len(m.columns))
	for i, col := range m.columns {
		result[i] = make([]int, len(col))
		copy(result[i], col)
	}
	return result
}

// Set updates the value at the specified (row, col) in the matrix with val.
// The rows and columns are 0-indexed. It returns true if the update was successful, false otherwise.
func (m *Matrix) Set(row, col, val int) bool {
	if m == nil {
		return false
	}
	if row < 0 || row >= len(m.rows) {
		return false
	}
	if col < 0 || (len(m.rows) > 0 && col >= len(m.rows[0])) {
		return false
	}
	m.rows[row][col] = val
	m.columns[col][row] = val
	return true
}


=== Test Results (Attempt 10) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/matrix [build failed]
FAIL

=== STDERR ===
# exercism/matrix [exercism/matrix.test]
./matrix_test.go:280:17: cannot use New("1 2 3 10 11\n4 5 6 11 12\n7 8 9 12 13\n 8 7 6 13 14") (value of type *Matrix) as type Matrix in assignment
./matrix_test.go:285:15: invalid operation: matrix == nil (mismatched types Matrix and untyped nil)


=== FINAL STATUS: FAILED ===