=== Initial Source Code ===
Source file: exercises/practice/rna-transcription/.meta/example.py
DNA_TO_RNA = str.maketrans("AGCT", "UCGA")

def to_rna(dna_strand):
    return dna_strand.translate(DNA_TO_RNA)


=== Source Interface ===
def to_rna(dna_strand):
    pass


=== Target Interface ===
package strand

func ToRNA(dna string) string {
	panic("Please implement the ToRNA function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/rna-transcription/canonical-data.json
# File last updated on 2023-07-19

import unittest

from rna_transcription import (
    to_rna,
)


class RnaTranscriptionTest(unittest.TestCase):
    def test_empty_rna_sequence(self):
        self.assertEqual(to_rna(""), "")

    def test_rna_complement_of_cytosine_is_guanine(self):
        self.assertEqual(to_rna("C"), "G")

    def test_rna_complement_of_guanine_is_cytosine(self):
        self.assertEqual(to_rna("G"), "C")

    def test_rna_complement_of_thymine_is_adenine(self):
        self.assertEqual(to_rna("T"), "A")

    def test_rna_complement_of_adenine_is_uracil(self):
        self.assertEqual(to_rna("A"), "U")

    def test_rna_complement(self):
        self.assertEqual(to_rna("ACGTGGTCTTAA"), "UGCACCAGAAUU")


=== Target Test Code ===
package strand

import "testing"

func TestRNATranscription(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := ToRNA(tc.input); actual != tc.expected {
				t.Fatalf("ToRNA(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkRNATranscription(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			ToRNA(tc.input)
		}
	}
}


=== Initial Translation ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not found in the mapping, keep it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}


=== Initial Test Results ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== Retry Attempt 1 ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not found in the mapping, leave it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}

// exercises/practice/rna-transcription/.meta/example_test.go
package meta

import (
	"testing"
)

// testCase defines a test case for the ToRNA function
type testCase struct {
	description string
	input       string
	expected    string
}

// testCases is a slice of test cases to validate the ToRNA function
var testCases = []testCase{
	{
		description: "basic transcription",
		input:       "AGCT",
		expected:    "UCGA",
	},
	{
		description: "empty string",
		input:       "",
		expected:    "",
	},
	{
		description: "all same nucleotides",
		input:       "AAAA",
		expected:    "UUUU",
	},
	{
		description: "mixed strand",
		input:       "GATC",
		expected:    "CUAG",
	},
}

func TestRNATranscription(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := ToRNA(tc.input); actual != tc.expected {
				t.Errorf("ToRNA(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkRNATranscription(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			ToRNA(tc.input)
		}
	}
}


=== Test Results (Attempt 1) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== Retry Attempt 2 ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not found in the mapping, leave it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}

// exercises/practice/rna-transcription/.meta/example_test.go
package meta

import (
	"testing"
)

// testCase defines a test case for the ToRNA function
type testCase struct {
	description string
	input       string
	expected    string
}

// testCases is a slice of test cases to validate the ToRNA function
var testCases = []testCase{
	{
		description: "basic transcription",
		input:       "AGCT",
		expected:    "UCGA",
	},
	{
		description: "empty string",
		input:       "",
		expected:    "",
	},
	{
		description: "all same nucleotides",
		input:       "AAAA",
		expected:    "UUUU",
	},
	{
		description: "mixed strand",
		input:       "GATC",
		expected:    "CUAG",
	},
}

func TestRNATranscription(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := ToRNA(tc.input); actual != tc.expected {
				t.Errorf("ToRNA(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkRNATranscription(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			ToRNA(tc.input)
		}
	}
}


=== Test Results (Attempt 2) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== Retry Attempt 3 ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not in the mapping, leave it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}

// exercises/practice/rna-transcription/.meta/example_test.go
package meta

import "testing"

// testCase defines a test case for the ToRNA function
type testCase struct {
	description string
	input       string
	expected    string
}

// testCases is a slice of test cases to validate the ToRNA function
var testCases = []testCase{
	{
		description: "basic transcription",
		input:       "AGCT",
		expected:    "UCGA",
	},
	{
		description: "empty string",
		input:       "",
		expected:    "",
	},
	{
		description: "all same nucleotides",
		input:       "AAAA",
		expected:    "UUUU",
	},
	{
		description: "mixed strand",
		input:       "GATC",
		expected:    "CUAG",
	},
}

// TestRNATranscription tests the ToRNA function using various test cases.
func TestRNATranscription(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := ToRNA(tc.input); actual != tc.expected {
				t.Errorf("ToRNA(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

// BenchmarkRNATranscription benchmarks the ToRNA function using the set of test cases.
func BenchmarkRNATranscription(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}

	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			ToRNA(tc.input)
		}
	}
}


=== Test Results (Attempt 3) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== Retry Attempt 4 ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not in the mapping, leave it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}

// exercises/practice/rna-transcription/.meta/example_test.go
package meta

import "testing"

// testCase defines a test case for the ToRNA function.
type testCase struct {
	description string
	input       string
	expected    string
}

// testCases is a slice of test cases to validate the ToRNA function.
var testCases = []testCase{
	{
		description: "basic transcription",
		input:       "AGCT",
		expected:    "UCGA",
	},
	{
		description: "empty string",
		input:       "",
		expected:    "",
	},
	{
		description: "all same nucleotides",
		input:       "AAAA",
		expected:    "UUUU",
	},
	{
		description: "mixed strand",
		input:       "GATC",
		expected:    "CUAG",
	},
}

// TestRNATranscription tests the ToRNA function using various test cases.
func TestRNATranscription(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := ToRNA(tc.input); actual != tc.expected {
				t.Errorf("ToRNA(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

// BenchmarkRNATranscription benchmarks the ToRNA function using the set of test cases.
func BenchmarkRNATranscription(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}

	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			ToRNA(tc.input)
		}
	}
}


=== Test Results (Attempt 4) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== Retry Attempt 5 ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not in the mapping, leave it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}

// exercises/practice/rna-transcription/.meta/example_test.go
package meta

import "testing"

// testCase defines a test case for the ToRNA function.
type testCase struct {
	description string
	input       string
	expected    string
}

// testCases is a slice of test cases to validate the ToRNA function.
var testCases = []testCase{
	{
		description: "basic transcription",
		input:       "AGCT",
		expected:    "UCGA",
	},
	{
		description: "empty string",
		input:       "",
		expected:    "",
	},
	{
		description: "all same nucleotides",
		input:       "AAAA",
		expected:    "UUUU",
	},
	{
		description: "mixed strand",
		input:       "GATC",
		expected:    "CUAG",
	},
}

// TestRNATranscription tests the ToRNA function using various test cases.
func TestRNATranscription(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := ToRNA(tc.input); actual != tc.expected {
				t.Errorf("ToRNA(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

// BenchmarkRNATranscription benchmarks the ToRNA function using the set of test cases.
func BenchmarkRNATranscription(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}

	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			ToRNA(tc.input)
		}
	}
}


=== Test Results (Attempt 5) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== Retry Attempt 6 ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not in the mapping, leave it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}


=== Test Results (Attempt 6) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== Retry Attempt 7 ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not in the mapping, leave it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}

// exercises/practice/rna-transcription/.meta/example_test.go
package meta

import "testing"

// testCase defines a test case for the ToRNA function.
type testCase struct {
	description string
	input       string
	expected    string
}

// testCases is a slice of test cases to validate the ToRNA function.
var testCases = []testCase{
	{
		description: "basic transcription",
		input:       "AGCT",
		expected:    "UCGA",
	},
	{
		description: "empty string",
		input:       "",
		expected:    "",
	},
	{
		description: "all same nucleotides",
		input:       "AAAA",
		expected:    "UUUU",
	},
	{
		description: "mixed strand",
		input:       "GATC",
		expected:    "CUAG",
	},
}

// TestRNATranscription tests the ToRNA function using various test cases.
func TestRNATranscription(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := ToRNA(tc.input); actual != tc.expected {
				t.Errorf("ToRNA(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

// BenchmarkRNATranscription benchmarks the ToRNA function using the set of test cases.
func BenchmarkRNATranscription(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}

	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			ToRNA(tc.input)
		}
	}
}


=== Test Results (Attempt 7) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== Retry Attempt 8 ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not in the mapping, leave it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}

// exercises/practice/rna-transcription/.meta/example_test.go
package meta

import "testing"

// testCase defines a test case for the ToRNA function.
type testCase struct {
	description string
	input       string
	expected    string
}

// testCases is a slice of test cases to validate the ToRNA function.
var testCases = []testCase{
	{
		description: "basic transcription",
		input:       "AGCT",
		expected:    "UCGA",
	},
	{
		description: "empty string",
		input:       "",
		expected:    "",
	},
	{
		description: "all same nucleotides",
		input:       "AAAA",
		expected:    "UUUU",
	},
	{
		description: "mixed strand",
		input:       "GATC",
		expected:    "CUAG",
	},
}

// TestRNATranscription tests the ToRNA function using various test cases.
func TestRNATranscription(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := ToRNA(tc.input); actual != tc.expected {
				t.Errorf("ToRNA(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

// BenchmarkRNATranscription benchmarks the ToRNA function using the set of test cases.
func BenchmarkRNATranscription(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}

	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			ToRNA(tc.input)
		}
	}
}


=== Test Results (Attempt 8) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== Retry Attempt 9 ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not in the mapping, leave it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}

// exercises/practice/rna-transcription/.meta/example_test.go
package meta

import "testing"

// testCase defines a test case for the ToRNA function.
type testCase struct {
	description string
	input       string
	expected    string
}

// testCases is a slice of test cases to validate the ToRNA function.
var testCases = []testCase{
	{
		description: "basic transcription",
		input:       "AGCT",
		expected:    "UCGA",
	},
	{
		description: "empty string",
		input:       "",
		expected:    "",
	},
	{
		description: "all same nucleotides",
		input:       "AAAA",
		expected:    "UUUU",
	},
	{
		description: "mixed strand",
		input:       "GATC",
		expected:    "CUAG",
	},
}

// TestRNATranscription tests the ToRNA function using various test cases.
func TestRNATranscription(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := ToRNA(tc.input); actual != tc.expected {
				t.Errorf("ToRNA(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

// BenchmarkRNATranscription benchmarks the ToRNA function using the set of test cases.
func BenchmarkRNATranscription(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}

	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			ToRNA(tc.input)
		}
	}
}


=== Test Results (Attempt 9) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== Retry Attempt 10 ===
// exercises/practice/rna-transcription/.meta/example.go
package meta

// ToRNA transforms a DNA string into its corresponding RNA string.
// It replaces each nucleotide as follows: A => U, G => C, C => G, T => A.
func ToRNA(dna string) string {
	// Define the nucleotide mapping
	mapping := map[rune]rune{
		'A': 'U',
		'G': 'C',
		'C': 'G',
		'T': 'A',
	}

	// Build the RNA string by translating each nucleotide in the DNA string.
	rna := make([]rune, len(dna))
	for i, nucleotide := range dna {
		if newNucleotide, ok := mapping[nucleotide]; ok {
			rna[i] = newNucleotide
		} else {
			// If the nucleotide is not in the mapping, leave it unchanged
			rna[i] = nucleotide
		}
	}

	return string(rna)
}

// exercises/practice/rna-transcription/.meta/example_test.go
package meta

import "testing"

// testCase defines a test case for the ToRNA function.
type testCase struct {
	description string
	input       string
	expected    string
}

// testCases is a slice of test cases to validate the ToRNA function.
var testCases = []testCase{
	{
		description: "basic transcription",
		input:       "AGCT",
		expected:    "UCGA",
	},
	{
		description: "empty string",
		input:       "",
		expected:    "",
	},
	{
		description: "all same nucleotides",
		input:       "AAAA",
		expected:    "UUUU",
	},
	{
		description: "mixed strand",
		input:       "GATC",
		expected:    "CUAG",
	},
}

// TestRNATranscription tests the ToRNA function using various test cases.
func TestRNATranscription(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := ToRNA(tc.input); actual != tc.expected {
				t.Errorf("ToRNA(%q) = %q, want: %q", tc.input, actual, tc.expected)
			}
		})
	}
}

// BenchmarkRNATranscription benchmarks the ToRNA function using the set of test cases.
func BenchmarkRNATranscription(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			ToRNA(tc.input)
		}
	}
}


=== Test Results (Attempt 10) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (rna_transcription.go) and strand (rna_transcription_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/rna-transcription


=== FINAL STATUS: FAILED ===