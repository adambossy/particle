=== Initial Source Code ===
Source file: exercises/practice/flatten-array/.meta/example.py
def is_iterable(thing):
    try:
        iter(thing)
    except TypeError:
        return False
    else:
        return True


def flatten(iterable):
    """Flatten a list of lists."""
    flattened = []
    for item in iterable:
        if is_iterable(item) and not isinstance(item, (str, bytes)):
            flattened += flatten(item)
        elif item is not None:
            flattened.append(item)
    return flattened


=== Source Interface ===
def flatten(iterable):
    pass


=== Target Interface ===
package flatten

func Flatten(nested interface{}) []interface{} {
	panic("Please implement the Flatten function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/flatten-array/canonical-data.json
# File last updated on 2023-07-19

import unittest

from flatten_array import (
    flatten,
)


class FlattenArrayTest(unittest.TestCase):
    def test_empty(self):
        inputs = []
        expected = []
        self.assertEqual(flatten(inputs), expected)

    def test_no_nesting(self):
        inputs = [0, 1, 2]
        expected = [0, 1, 2]
        self.assertEqual(flatten(inputs), expected)

    def test_flattens_a_nested_array(self):
        inputs = [[[]]]
        expected = []
        self.assertEqual(flatten(inputs), expected)

    def test_flattens_array_with_just_integers_present(self):
        inputs = [1, [2, 3, 4, 5, 6, 7], 8]
        expected = [1, 2, 3, 4, 5, 6, 7, 8]
        self.assertEqual(flatten(inputs), expected)

    def test_5_level_nesting(self):
        inputs = [0, 2, [[2, 3], 8, 100, 4, [[[50]]]], -2]
        expected = [0, 2, 2, 3, 8, 100, 4, 50, -2]
        self.assertEqual(flatten(inputs), expected)

    def test_6_level_nesting(self):
        inputs = [1, [2, [[3]], [4, [[5]]], 6, 7], 8]
        expected = [1, 2, 3, 4, 5, 6, 7, 8]
        self.assertEqual(flatten(inputs), expected)

    def test_null_values_are_omitted_from_the_final_result(self):
        inputs = [1, 2, None]
        expected = [1, 2]
        self.assertEqual(flatten(inputs), expected)

    def test_consecutive_null_values_at_the_front_of_the_list_are_omitted_from_the_final_result(
        self,
    ):
        inputs = [None, None, 3]
        expected = [3]
        self.assertEqual(flatten(inputs), expected)

    def test_consecutive_null_values_in_the_middle_of_the_list_are_omitted_from_the_final_result(
        self,
    ):
        inputs = [1, None, None, 4]
        expected = [1, 4]
        self.assertEqual(flatten(inputs), expected)

    def test_6_level_nest_list_with_null_values(self):
        inputs = [0, 2, [[2, 3], 8, [[100]], None, [[None]]], -2]
        expected = [0, 2, 2, 3, 8, 100, -2]
        self.assertEqual(flatten(inputs), expected)

    def test_all_values_in_nested_list_are_null(self):
        inputs = [None, [[[None]]], None, None, [[None, None], None], None]
        expected = []
        self.assertEqual(flatten(inputs), expected)


=== Target Test Code ===
package flatten

import (
	"reflect"
	"testing"
)

func TestFlatten(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			actual := Flatten(tc.input)

			// Clarify failures where an empty slice is expected, but a nil slice is given.
			if actual == nil && tc.expected != nil && len(tc.expected) == 0 {
				t.Fatalf("Flatten(%v) = %v (nil slice), want: %v (empty slice)", tc.input, actual, tc.expected)
			}

			if !reflect.DeepEqual(actual, tc.expected) {
				t.Fatalf("Flatten(%v) = %v, want: %v", tc.input, &actual, tc.expected)
			}
		})
	}
}

func BenchmarkFlatten(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, tc := range testCases {
			Flatten(tc.input)
		}
	}
}


=== Initial Translation ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// This mimics the Python is_iterable function, with the exception that strings and bytes are not flattened.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// If the item is a slice or array, we need to ensure it's not a []byte.
	if kind == reflect.Slice || kind == reflect.Array {
		// Check if the type is exactly []byte
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Initial Test Results ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== Retry Attempt 1 ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// In Go, strings are not considered flattenable. []byte is explicitly excluded.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// Check if item is a slice or array
	if kind == reflect.Slice || kind == reflect.Array {
		// Exclude []byte explicitly
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Test Results (Attempt 1) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== Retry Attempt 2 ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// In Go, strings are not considered flattenable.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// Check if item is a slice or array
	if kind == reflect.Slice || kind == reflect.Array {
		// Exclude []byte explicitly
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Test Results (Attempt 2) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== Retry Attempt 3 ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// In Go, strings are not considered flattenable.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// Check if item is a slice or array
	if kind == reflect.Slice || kind == reflect.Array {
		// Exclude []byte explicitly
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Test Results (Attempt 3) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== Retry Attempt 4 ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// In Go, strings are not considered flattenable.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// Check if item is a slice or array
	if kind == reflect.Slice || kind == reflect.Array {
		// Exclude []byte explicitly
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Test Results (Attempt 4) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== Retry Attempt 5 ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// In Go, strings are not considered flattenable.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// Check if item is a slice or array
	if kind == reflect.Slice || kind == reflect.Array {
		// Exclude []byte explicitly
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Test Results (Attempt 5) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== Retry Attempt 6 ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// In Go, strings are not considered flattenable.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// Check if the item is a slice or array
	if kind == reflect.Slice || kind == reflect.Array {
		// Exclude []byte explicitly
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Test Results (Attempt 6) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== Retry Attempt 7 ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// In Go, strings are not considered flattenable.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// Check if item is a slice or array
	if kind == reflect.Slice || kind == reflect.Array {
		// Exclude []byte explicitly
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Test Results (Attempt 7) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== Retry Attempt 8 ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// In Go, strings are not considered flattenable.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// Check if item is a slice or array
	if kind == reflect.Slice || kind == reflect.Array {
		// Exclude []byte explicitly
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Test Results (Attempt 8) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== Retry Attempt 9 ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// In Go, strings are not considered flattenable.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// Check if item is a slice or array
	if kind == reflect.Slice || kind == reflect.Array {
		// Exclude []byte explicitly
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Test Results (Attempt 9) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== Retry Attempt 10 ===
// exercises/practice/flatten-array/.meta/example.go
package meta

import "reflect"

// isFlattenable checks if the provided item is a slice or an array and not a string or []byte.
// In Go, strings are not considered flattenable.
func isFlattenable(item interface{}) bool {
	if item == nil {
		return false
	}
	v := reflect.ValueOf(item)
	kind := v.Kind()
	// Check if item is a slice or array
	if kind == reflect.Slice || kind == reflect.Array {
		// Exclude []byte explicitly
		if reflect.TypeOf(item) == reflect.TypeOf([]byte(nil)) {
			return false
		}
		return true
	}
	return false
}

// Flatten recursively flattens a nested slice/array structure.
// It traverses each element; if the element is itself a flattenable slice/array (and not a string or []byte),
// it recursively flattens that element. If an element is nil, it is skipped.
// Otherwise, the element is appended to the resulting slice.
func Flatten(nested interface{}) []interface{} {
	if nested == nil {
		return []interface{}{}
	}

	v := reflect.ValueOf(nested)
	kind := v.Kind()

	// If nested is not a slice or array, return it as a single element slice.
	if kind != reflect.Slice && kind != reflect.Array {
		return []interface{}{nested}
	}

	result := []interface{}{}
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i).Interface()
		if isFlattenable(elem) {
			result = append(result, Flatten(elem)...)
		} else if elem != nil {
			result = append(result, elem)
		}
	}
	return result
}


=== Test Results (Attempt 10) ===
Return code: 1
=== STDOUT ===

=== STDERR ===
found packages meta (flatten_array.go) and flatten (flatten_array_test.go) in /private/var/folders/gy/0zbg6hg95tq8_gy1dnr3tknm0000gn/T/tmpt_h86ptc/sandbox/exercises/practice/flatten-array


=== FINAL STATUS: FAILED ===