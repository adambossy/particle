=== Initial Source Code ===
Source file: exercises/practice/variable-length-quantity/.meta/example.py
EIGHT_BIT_MASK = 0x80
SEVEN_BIT_MASK = 0x7f


def encode_single(number):
    byte_string = [number & SEVEN_BIT_MASK]
    number >>= 7

    while number > 0:
        byte_string.append(number & SEVEN_BIT_MASK | EIGHT_BIT_MASK)
        number >>= 7

    return byte_string[::-1]


def encode(numbers):
    return sum((encode_single(number) for number in numbers), [])


def decode(byte_string):
    values = []
    number = 0

    for idx, byte in enumerate(byte_string):
        number <<= 7
        number += (byte & SEVEN_BIT_MASK)

        if byte & EIGHT_BIT_MASK == 0:
            values.append(number)
            number = 0
        elif idx == len(byte_string) - 1:
            raise ValueError('incomplete sequence')

    return values


=== Source Interface ===
def encode(numbers):
    pass


def decode(bytes_):
    pass


=== Target Interface ===
package variablelengthquantity

func EncodeVarint(input []uint32) []byte {
	panic("Please implement the EncodeVarint function")
}

func DecodeVarint(input []byte) ([]uint32, error) {
	panic("Please implement the DecodeVarint function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/variable-length-quantity/canonical-data.json
# File last updated on 2023-07-19

import unittest

from variable_length_quantity import (
    decode,
    encode,
)


class VariableLengthQuantityTest(unittest.TestCase):
    def test_zero(self):
        self.assertEqual(encode([0x0]), [0x0])

    def test_arbitrary_single_byte(self):
        self.assertEqual(encode([0x40]), [0x40])

    def test_largest_single_byte(self):
        self.assertEqual(encode([0x7F]), [0x7F])

    def test_smallest_double_byte(self):
        self.assertEqual(encode([0x80]), [0x81, 0x0])

    def test_arbitrary_double_byte(self):
        self.assertEqual(encode([0x2000]), [0xC0, 0x0])

    def test_largest_double_byte(self):
        self.assertEqual(encode([0x3FFF]), [0xFF, 0x7F])

    def test_smallest_triple_byte(self):
        self.assertEqual(encode([0x4000]), [0x81, 0x80, 0x0])

    def test_arbitrary_triple_byte(self):
        self.assertEqual(encode([0x100000]), [0xC0, 0x80, 0x0])

    def test_largest_triple_byte(self):
        self.assertEqual(encode([0x1FFFFF]), [0xFF, 0xFF, 0x7F])

    def test_smallest_quadruple_byte(self):
        self.assertEqual(encode([0x200000]), [0x81, 0x80, 0x80, 0x0])

    def test_arbitrary_quadruple_byte(self):
        self.assertEqual(encode([0x8000000]), [0xC0, 0x80, 0x80, 0x0])

    def test_largest_quadruple_byte(self):
        self.assertEqual(encode([0xFFFFFFF]), [0xFF, 0xFF, 0xFF, 0x7F])

    def test_smallest_quintuple_byte(self):
        self.assertEqual(encode([0x10000000]), [0x81, 0x80, 0x80, 0x80, 0x0])

    def test_arbitrary_quintuple_byte(self):
        self.assertEqual(encode([0xFF000000]), [0x8F, 0xF8, 0x80, 0x80, 0x0])

    def test_maximum_32_bit_integer_input(self):
        self.assertEqual(encode([0xFFFFFFFF]), [0x8F, 0xFF, 0xFF, 0xFF, 0x7F])

    def test_two_single_byte_values(self):
        self.assertEqual(encode([0x40, 0x7F]), [0x40, 0x7F])

    def test_two_multi_byte_values(self):
        self.assertEqual(
            encode([0x4000, 0x123456]), [0x81, 0x80, 0x0, 0xC8, 0xE8, 0x56]
        )

    def test_many_multi_byte_values(self):
        self.assertEqual(
            encode([0x2000, 0x123456, 0xFFFFFFF, 0x0, 0x3FFF, 0x4000]),
            [
                0xC0,
                0x0,
                0xC8,
                0xE8,
                0x56,
                0xFF,
                0xFF,
                0xFF,
                0x7F,
                0x0,
                0xFF,
                0x7F,
                0x81,
                0x80,
                0x0,
            ],
        )

    def test_one_byte(self):
        self.assertEqual(decode([0x7F]), [0x7F])

    def test_two_bytes(self):
        self.assertEqual(decode([0xC0, 0x0]), [0x2000])

    def test_three_bytes(self):
        self.assertEqual(decode([0xFF, 0xFF, 0x7F]), [0x1FFFFF])

    def test_four_bytes(self):
        self.assertEqual(decode([0x81, 0x80, 0x80, 0x0]), [0x200000])

    def test_maximum_32_bit_integer(self):
        self.assertEqual(decode([0x8F, 0xFF, 0xFF, 0xFF, 0x7F]), [0xFFFFFFFF])

    def test_incomplete_sequence_causes_error(self):
        with self.assertRaises(ValueError) as err:
            decode([0xFF])
        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "incomplete sequence")

    def test_incomplete_sequence_causes_error_even_if_value_is_zero(self):
        with self.assertRaises(ValueError) as err:
            decode([0x80])
        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "incomplete sequence")

    def test_multiple_values(self):
        self.assertEqual(
            decode(
                [
                    0xC0,
                    0x0,
                    0xC8,
                    0xE8,
                    0x56,
                    0xFF,
                    0xFF,
                    0xFF,
                    0x7F,
                    0x0,
                    0xFF,
                    0x7F,
                    0x81,
                    0x80,
                    0x0,
                ]
            ),
            [0x2000, 0x123456, 0xFFFFFFF, 0x0, 0x3FFF, 0x4000],
        )


=== Target Test Code ===
package variablelengthquantity

import (
	"bytes"
	"reflect"
	"testing"
)

func TestEncodeVarint(t *testing.T) {
	for _, tc := range encodeTestCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := EncodeVarint(tc.input); !bytes.Equal(actual, tc.expected) {
				t.Fatalf("EncodeVarint(%#v)\n got:%#v\nwant:%#v", tc.input, actual, tc.expected)
			}
		})
	}
}

func TestDecodeVarint(t *testing.T) {
	for _, tc := range decodeTestCases {
		t.Run(tc.description, func(t *testing.T) {
			actual, err := DecodeVarint(tc.input)
			switch {
			case tc.errorExpected:
				if err == nil {
					t.Fatalf("DecodeVarint(%#v) expected error, got: %#v", tc.input, actual)
				}
			case err != nil:
				t.Fatalf("DecodeVarint(%#v) returned error: %v, want:%#v", tc.input, err, tc.expected)
			case !reflect.DeepEqual(actual, tc.expected):
				t.Fatalf("DecodeVarint(%#v) = %#v, want:%#v", tc.input, actual, tc.expected)
			}
		})
	}
}


=== Initial Translation ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	// Begin with the least significant 7 bits
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	// While there are more bits, append them with the continuation flag
	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask) | eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It translates the Python 'encode' function to Go.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		encoded := encodeSingle(number)
		result = append(result, encoded...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It translates the Python 'decode' function to Go. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32 = 0

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			// End of current number, append it to values and reset number
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Initial Test Results ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== Retry Attempt 1 ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask  = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask) | eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It corresponds to the Python 'encode' function.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		result = append(result, encodeSingle(number)...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It corresponds to the Python 'decode' function. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32 = 0

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Test Results (Attempt 1) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== Retry Attempt 2 ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask  = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask) | eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It corresponds to the Python 'encode' function.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		result = append(result, encodeSingle(number)...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It corresponds to the Python 'decode' function. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32 = 0

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			// End of current number, append and reset
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Test Results (Attempt 2) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== Retry Attempt 3 ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask  = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask)|eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It corresponds to the Python 'encode' function.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		result = append(result, encodeSingle(number)...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It corresponds to the Python 'decode' function. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Test Results (Attempt 3) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== Retry Attempt 4 ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask  = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask)|eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It corresponds to the Python 'encode' function.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		result = append(result, encodeSingle(number)...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It corresponds to the Python 'decode' function. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Test Results (Attempt 4) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== Retry Attempt 5 ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask  = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask)|eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It corresponds to the Python 'encode' function.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		result = append(result, encodeSingle(number)...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It corresponds to the Python 'decode' function. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Test Results (Attempt 5) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== Retry Attempt 6 ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask  = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask)|eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It corresponds to the Python 'encode' function.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		result = append(result, encodeSingle(number)...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It corresponds to the Python 'decode' function. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Test Results (Attempt 6) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== Retry Attempt 7 ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask  = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask)|eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It corresponds to the Python 'encode' function.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		result = append(result, encodeSingle(number)...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It corresponds to the Python 'decode' function. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Test Results (Attempt 7) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== Retry Attempt 8 ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask  = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask)|eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It corresponds to the Python 'encode' function.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		result = append(result, encodeSingle(number)...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It corresponds to the Python 'decode' function. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Test Results (Attempt 8) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== Retry Attempt 9 ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask  = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask)|eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It corresponds to the Python 'encode' function.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		result = append(result, encodeSingle(number)...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It corresponds to the Python 'decode' function. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Test Results (Attempt 9) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== Retry Attempt 10 ===
// exercises/practice/variable-length-quantity/.meta/example.go
package variablelengthquantity

import (
	"fmt"
)

const (
	eightBitMask  = 0x80
	sevenBitMask = 0x7f
)

// encodeSingle encodes a single number into its variable-length quantity representation.
// It returns a slice of bytes representing the encoded number.
func encodeSingle(number uint32) []byte {
	digits := []byte{byte(number & sevenBitMask)}
	number >>= 7

	for number > 0 {
		digits = append(digits, byte((number & sevenBitMask)|eightBitMask))
		number >>= 7
	}

	// Reverse the slice to put it in the correct order
	for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {
		digits[i], digits[j] = digits[j], digits[i]
	}

	return digits
}

// EncodeVarint encodes a slice of uint32 numbers into a variable-length quantity byte slice.
// It corresponds to the Python 'encode' function.
func EncodeVarint(numbers []uint32) []byte {
	var result []byte
	for _, number := range numbers {
		result = append(result, encodeSingle(number)...)
	}
	return result
}

// DecodeVarint decodes a variable-length quantity encoded byte slice into a slice of uint32 numbers.
// It corresponds to the Python 'decode' function. If the sequence is incomplete, it returns an error.
func DecodeVarint(byteString []byte) ([]uint32, error) {
	var values []uint32
	var number uint32

	for idx, b := range byteString {
		number = (number << 7) + uint32(b&sevenBitMask)

		if b&eightBitMask == 0 {
			values = append(values, number)
			number = 0
		} else if idx == len(byteString)-1 {
			return nil, fmt.Errorf("incomplete sequence")
		}
	}

	return values, nil
}


=== Test Results (Attempt 10) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/variable-length-quantity [build failed]
FAIL

=== STDERR ===
# exercism/variable-length-quantity [exercism/variable-length-quantity.test]
./variable_length_quantity_test.go:10:21: undefined: encodeTestCases
./variable_length_quantity_test.go:20:21: undefined: decodeTestCases


=== FINAL STATUS: FAILED ===