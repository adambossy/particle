=== Initial Source Code ===
Source file: exercises/practice/binary/.meta/example.py
def parse_binary(digits):
    if set(digits) - set('01'):
        raise ValueError('Invalid binary literal: ' + digits)
    return sum(int(digit) * 2 ** idx
               for (idx, digit) in enumerate(reversed(digits)))


=== Source Interface ===
def parse_binary(binary_string):
    pass


=== Target Interface ===
package binary

// TODO: add solution stub
func ParseBinary(binary string, expected int, ok bool) {
	panic("Please implement the ParseBinary function")
}


=== Source Test Code ===
"""Tests for the binary exercise

Implementation note:
If the argument to parse_binary isn't a valid binary number the
function should raise a ValueError with a meaningful error message.
"""
import unittest

from binary import parse_binary


class BinaryTest(unittest.TestCase):
    def test_binary_1_is_decimal_1(self):
        self.assertEqual(parse_binary("1"), 1)

    def test_binary_10_is_decimal_2(self):
        self.assertEqual(parse_binary("10"), 2)

    def test_binary_11_is_decimal_3(self):
        self.assertEqual(parse_binary("11"), 3)

    def test_binary_100_is_decimal_4(self):
        self.assertEqual(parse_binary("100"), 4)

    def test_binary_1001_is_decimal_9(self):
        self.assertEqual(parse_binary("1001"), 9)

    def test_binary_11010_is_decimal_26(self):
        self.assertEqual(parse_binary("11010"), 26)

    def test_binary_10001101000_is_decimal_1128(self):
        self.assertEqual(parse_binary("10001101000"), 1128)

    def test_invalid_binary_text_only(self):
        with self.assertRaises(ValueError) as err:
            parse_binary("carrot")
        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "Invalid binary literal: carrot")

    def test_invalid_binary_number_not_base2(self):
        with self.assertRaises(ValueError) as err:
            parse_binary("102011")
        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "Invalid binary literal: 102011")

    def test_invalid_binary_numbers_with_text(self):
        with self.assertRaises(ValueError) as err:
            parse_binary("10nope")
        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "Invalid binary literal: 10nope")

    def test_invalid_binary_text_with_numbers(self):
        with self.assertRaises(ValueError) as err:
            parse_binary("nope10")
        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "Invalid binary literal: nope10")

if __name__ == '__main__':
    unittest.main()


=== Target Test Code ===
package binary

import (
	"testing"
)

// You must implement the function,
//
//    func ParseBinary(string) (int, error)
//
// It is standard for Go functions to return error values to report error conditions.
// The test cases have some inputs that are invalid.
// For invalid inputs, return an error that signals to the user why the error happened.
// The test cases can only check that you return *some* error,
// but it's still good practice to return useful errors.

var testCases = []struct {
	binary   string
	expected int
	ok       bool
}{
	{"1", 1, true},
	{"10", 2, true},
	{"11", 3, true},
	{"100", 4, true},
	{"1001", 9, true},
	{"11010", 26, true},
	{"10001101000", 1128, true},
	{"0", 0, true},
	{"foo101", 0, false},
	{"101bar", 0, false},
	{"101baz010", 0, false},
	{"22", 0, false},
}

func TestParseBinary(t *testing.T) {
	for _, tt := range testCases {
		actual, err := ParseBinary(tt.binary)
		if tt.ok {
			if err != nil {
				var _ error = err
				t.Fatalf("ParseBinary(%v) returned error %q.  Error not expected.",
					tt.binary, err)
			}
			if actual != tt.expected {
				t.Fatalf("ParseBinary(%v): actual %d, expected %v",
					tt.binary, actual, tt.expected)
			}
		} else if err == nil {
			t.Fatalf("ParseBinary(%v) returned %d and no error.  Expected an error.",
				tt.binary, actual)
		}
	}
}

// Benchmark combined time for all tests
func BenchmarkBinary(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for i := 0; i < b.N; i++ {
		for _, tt := range testCases {
			ParseBinary(tt.binary)
		}
	}
}


=== Initial Translation ===
// exercises/practice/binary/.meta/example.go
package binary

import "fmt"

// ParseBinary converts a string representing a binary number into its integer value.
// If the input contains any characters other than '0' or '1',
// it returns an error indicating an invalid binary literal.
func ParseBinary(digits string) (int, error) {
	// Validate the input: it should only contain '0' and '1'
	for _, c := range digits {
		if c != '0' && c != '1' {
			return 0, fmt.Errorf("Invalid binary literal: %s", digits)
		}
	}

	result := 0
	multiplier := 1
	// Process the string from right to left
	for i := len(digits) - 1; i >= 0; i-- {
		if digits[i] == '1' {
			result += multiplier
		}
		multiplier *= 2
	}

	return result, nil
}


=== Initial Test Results ===
Return code: 0
=== STDOUT ===
ok  	exercism/binary	0.275s

=== STDERR ===


=== FINAL STATUS: SUCCESS ===