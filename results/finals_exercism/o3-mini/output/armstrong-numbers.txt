=== Initial Source Code ===
Source file: exercises/practice/armstrong-numbers/.meta/example.py
def is_armstrong_number(number):
    return sum(pow(int(digit), len(str(number))) for digit in str(number)) == number


=== Source Interface ===
def is_armstrong_number(number):
    pass


=== Target Interface ===
package armstrong

func IsNumber(n int) bool {
	panic("Please implement the IsNumber function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/armstrong-numbers/canonical-data.json
# File last updated on 2023-07-20

import unittest

from armstrong_numbers import (
    is_armstrong_number,
)


class ArmstrongNumbersTest(unittest.TestCase):
    def test_zero_is_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(0), True)

    def test_single_digit_numbers_are_armstrong_numbers(self):
        self.assertIs(is_armstrong_number(5), True)

    def test_there_are_no_two_digit_armstrong_numbers(self):
        self.assertIs(is_armstrong_number(10), False)

    def test_three_digit_number_that_is_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(153), True)

    def test_three_digit_number_that_is_not_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(100), False)

    def test_four_digit_number_that_is_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(9474), True)

    def test_four_digit_number_that_is_not_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(9475), False)

    def test_seven_digit_number_that_is_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(9926315), True)

    def test_seven_digit_number_that_is_not_an_armstrong_number(self):
        self.assertIs(is_armstrong_number(9926314), False)


=== Target Test Code ===
package armstrong

import (
	"testing"
)

func TestArmstrong(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := IsNumber(tc.input); actual != tc.expected {
				t.Fatalf("IsNumber(%d) = %t, want: %t", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkIsNumber(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for _, tc := range testCases {
		for i := 0; i < b.N; i++ {
			IsNumber(tc.input)
		}
	}
}


=== Initial Translation ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import (
	"strconv"
)

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number
// of digits equals the original number, otherwise it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes the power of an integer base raised to an exponent exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}


=== Initial Test Results ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers_test.go:8:21: undefined: testCases
./armstrong_numbers_test.go:21:21: undefined: testCases


=== Retry Attempt 1 ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import (
	"strconv"
)

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number
// of digits equals the original number, otherwise it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes the power of an integer base raised to an exponent exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}

// exercises/practice/armstrong-numbers/.meta/example_test.go

// The following tests verify the Armstrong number implementation.

// Note: In Go, tests are typically placed in a separate _test.go file.

// File: exercises/practice/armstrong-numbers/.meta/example_test.go

import (
	"testing"
)

var testCases = []struct {
	description string
	input       int
	expected    bool
}{
	{"single digit numbers are Armstrong numbers", 5, true},
	{"non Armstrong number", 10, false},
	{"Armstrong number 153", 153, true},
	{"Armstrong number 9474", 9474, true},
	{"non Armstrong for similar pattern", 9475, false},
}

func TestArmstrong(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := IsNumber(tc.input); actual != tc.expected {
				t.Fatalf("IsNumber(%d) = %t, want: %t", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkIsNumber(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for _, tc := range testCases {
		for i := 0; i < b.N; i++ {
			IsNumber(tc.input)
		}
	}
}


=== Test Results (Attempt 1) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers.go:39:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 2 ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import (
	"strconv"
)

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number of digits
// equals the original number, otherwise it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes the power of an integer base raised to an exponent exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}

// exercises/practice/armstrong-numbers/.meta/example_test.go

// Note: The following is the test file for the Armstrong numbers implementation.
// Run "go test" in this directory to execute the tests.

// ---
// File: exercises/practice/armstrong-numbers/.meta/example_test.go

// +build test

// To keep the implementation and test code in separate files, copy the following code
// into a file named "example_test.go" in the same directory.

// package armstrong

// import (
// 	"testing"
// )

// var testCases = []struct {
// 	description string
// 	input       int
// 	expected    bool
// }{
// 	{"single digit numbers are Armstrong numbers", 5, true},
// 	{"non Armstrong number", 10, false},
// 	{"Armstrong number 153", 153, true},
// 	{"Armstrong number 9474", 9474, true},
// 	{"non Armstrong for similar pattern", 9475, false},
// }

// func TestArmstrong(t *testing.T) {
// 	for _, tc := range testCases {
// 		t.Run(tc.description, func(t *testing.T) {
// 			if actual := IsNumber(tc.input); actual != tc.expected {
// 				t.Fatalf("IsNumber(%d) = %t, want: %t", tc.input, actual, tc.expected)
// 			}
// 		})
// 	}
// }

// func BenchmarkIsNumber(b *testing.B) {
// 	if testing.Short() {
// 		b.Skip("skipping benchmark in short mode.")
// 	}
// 	for _, tc := range testCases {
// 		for i := 0; i < b.N; i++ {
// 			IsNumber(tc.input)
// 		}
// 	}
// }


=== Test Results (Attempt 2) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers_test.go:8:21: undefined: testCases
./armstrong_numbers_test.go:21:21: undefined: testCases


=== Retry Attempt 3 ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import "strconv"

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number of digits
// equals the original number, otherwise it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes base raised to the power exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}

// exercises/practice/armstrong-numbers/.meta/example_test.go

// To run tests, execute: go test
package armstrong

import (
	"testing"
)

var testCases = []struct {
	description string
	input       int
	expected    bool
}{
	{"single digit numbers are Armstrong numbers", 5, true},
	{"non Armstrong number", 10, false},
	{"Armstrong number 153", 153, true},
	{"Armstrong number 9474", 9474, true},
	{"non Armstrong for similar pattern", 9475, false},
}

func TestArmstrong(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := IsNumber(tc.input); actual != tc.expected {
				t.Fatalf("IsNumber(%d) = %t, want: %t", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkIsNumber(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for _, tc := range testCases {
		for i := 0; i < b.N; i++ {
			IsNumber(tc.input)
		}
	}
}


=== Test Results (Attempt 3) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers.go:32:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 4 ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import "strconv"

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number of digits
// equals the original number, otherwise it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes base raised to the power exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}

// exercises/practice/armstrong-numbers/.meta/example_test.go

// To run tests, execute: go test

package armstrong

import (
	"testing"
)

var testCases = []struct {
	description string
	input       int
	expected    bool
}{
	{"single digit numbers are Armstrong numbers", 5, true},
	{"non Armstrong number", 10, false},
	{"Armstrong number 153", 153, true},
	{"Armstrong number 9474", 9474, true},
	{"non Armstrong for similar pattern", 9475, false},
}

func TestArmstrong(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := IsNumber(tc.input); actual != tc.expected {
				t.Fatalf("IsNumber(%d) = %t, want: %t", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkIsNumber(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for _, tc := range testCases {
		for i := 0; i < b.N; i++ {
			IsNumber(tc.input)
		}
	}
}


=== Test Results (Attempt 4) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers.go:33:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 5 ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import "strconv"

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number of digits
// equals the original number, otherwise it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes base raised to the power exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}

// --------------------------------------------------------------------------------
// exercises/practice/armstrong-numbers/.meta/example_test.go
package armstrong

import (
	"testing"
)

var testCases = []struct {
	description string
	input       int
	expected    bool
}{
	{"single digit numbers are Armstrong numbers", 5, true},
	{"non Armstrong number", 10, false},
	{"Armstrong number 153", 153, true},
	{"Armstrong number 9474", 9474, true},
	{"non Armstrong for similar pattern", 9475, false},
}

func TestArmstrong(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := IsNumber(tc.input); actual != tc.expected {
				t.Fatalf("IsNumber(%d) = %t, want: %t", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkIsNumber(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for _, tc := range testCases {
		for i := 0; i < b.N; i++ {
			IsNumber(tc.input)
		}
	}
}


=== Test Results (Attempt 5) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers.go:31:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 6 ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import "strconv"

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number of digits
// equals the original number; otherwise, it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes base raised to the power exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}

// exercises/practice/armstrong-numbers/.meta/example_test.go

// To run tests, execute: go test

package armstrong

import (
	"testing"
)

var testCases = []struct {
	description string
	input       int
	expected    bool
}{
	{"single digit numbers are Armstrong numbers", 5, true},
	{"non Armstrong number", 10, false},
	{"Armstrong number 153", 153, true},
	{"Armstrong number 9474", 9474, true},
	{"non Armstrong for similar pattern", 9475, false},
}

func TestArmstrong(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			if actual := IsNumber(tc.input); actual != tc.expected {
				t.Fatalf("IsNumber(%d) = %t, want: %t", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkIsNumber(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for _, tc := range testCases {
		for i := 0; i < b.N; i++ {
			IsNumber(tc.input)
		}
	}
}


=== Test Results (Attempt 6) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers.go:33:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 7 ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import "strconv"

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number of digits
// equals the original number; otherwise, it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes base raised to the power exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}

// --------------------------------------------------------------------------------
// exercises/practice/armstrong-numbers/.meta/example_test.go
package armstrong

import (
	"testing"
)

var testCases = []struct {
	description string
	input       int
	expected    bool
}{
	{"single digit numbers are Armstrong numbers", 5, true},
	{"non Armstrong number", 10, false},
	{"Armstrong number 153", 153, true},
	{"Armstrong number 9474", 9474, true},
	{"non Armstrong for similar pattern", 9475, false},
}

func TestArmstrong(t *testing.T) {
	for _, tc := range testCases {
		tc := tc // capture range variable
		t.Run(tc.description, func(t *testing.T) {
			if actual := IsNumber(tc.input); actual != tc.expected {
				t.Fatalf("IsNumber(%d) = %t, want: %t", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkIsNumber(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for _, tc := range testCases {
		tc := tc // capture range variable
		b.Run(tc.description, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				IsNumber(tc.input)
			}
		})
	}
}


=== Test Results (Attempt 7) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers.go:31:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 8 ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import "strconv"

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number of digits
// equals the original number; otherwise, it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes base raised to the power exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}

// --------------------------------------------------------------------------------
// exercises/practice/armstrong-numbers/.meta/example_test.go
package armstrong

import (
	"testing"
)

var testCases = []struct {
	description string
	input       int
	expected    bool
}{
	{"single digit numbers are Armstrong numbers", 5, true},
	{"non Armstrong number", 10, false},
	{"Armstrong number 153", 153, true},
	{"Armstrong number 9474", 9474, true},
	{"non Armstrong for similar pattern", 9475, false},
}

func TestArmstrong(t *testing.T) {
	for _, tc := range testCases {
		tc := tc // capture variable
		t.Run(tc.description, func(t *testing.T) {
			if actual := IsNumber(tc.input); actual != tc.expected {
				t.Fatalf("IsNumber(%d) = %t, want %t", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkIsNumber(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for _, tc := range testCases {
		tc := tc // capture variable
		b.Run(tc.description, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				IsNumber(tc.input)
			}
		})
	}
}


=== Test Results (Attempt 8) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers.go:31:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 9 ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import "strconv"

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number of digits
// equals the original number; otherwise, it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes base raised to the power exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}

// --------------------------------------------------------------------------------
// exercises/practice/armstrong-numbers/.meta/example_test.go
package armstrong

import (
	"testing"
)

var testCases = []struct {
	description string
	input       int
	expected    bool
}{
	{"single digit numbers are Armstrong numbers", 5, true},
	{"non Armstrong number", 10, false},
	{"Armstrong number 153", 153, true},
	{"Armstrong number 9474", 9474, true},
	{"non Armstrong for similar pattern", 9475, false},
}

func TestArmstrong(t *testing.T) {
	for _, tc := range testCases {
		tc := tc // capture range variable
		t.Run(tc.description, func(t *testing.T) {
			if actual := IsNumber(tc.input); actual != tc.expected {
				t.Fatalf("IsNumber(%d) = %t, want: %t", tc.input, actual, tc.expected)
			}
		})
	}
}

func BenchmarkIsNumber(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	for _, tc := range testCases {
		tc := tc // capture range variable
		b.Run(tc.description, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				IsNumber(tc.input)
			}
		})
	}
}


=== Test Results (Attempt 9) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers.go:31:1: syntax error: non-declaration statement outside function body


=== Retry Attempt 10 ===
// exercises/practice/armstrong-numbers/.meta/example.go
package armstrong

import "strconv"

// IsNumber checks if a number is an Armstrong number.
// It returns true if the sum of each digit raised to the power of the number of digits
// equals the original number; otherwise, it returns false.
func IsNumber(n int) bool {
	s := strconv.Itoa(n)
	numDigits := len(s)
	sum := 0
	for _, c := range s {
		digit := int(c - '0')
		sum += intPow(digit, numDigits)
	}
	return sum == n
}

// intPow computes base raised to the power exp.
func intPow(base, exp int) int {
	result := 1
	for i := 0; i < exp; i++ {
		result *= base
	}
	return result
}


=== Test Results (Attempt 10) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/armstrong-numbers [build failed]
FAIL

=== STDERR ===
# exercism/armstrong-numbers [exercism/armstrong-numbers.test]
./armstrong_numbers_test.go:8:21: undefined: testCases
./armstrong_numbers_test.go:21:21: undefined: testCases


=== FINAL STATUS: FAILED ===