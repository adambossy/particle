=== Initial Source Code ===
Source file: exercises/practice/error-handling/.meta/example.py
def handle_error_by_throwing_exception():
    raise Exception('Meaningful message describing the source of the error')


def handle_error_by_returning_none(input_data):
    try:
        return int(input_data)
    except ValueError:
        return None


def handle_error_by_returning_tuple(input_data):
    try:
        return (True, int(input_data))
    except ValueError:
        return (False, None)


def filelike_objects_are_closed_on_exception(filelike_object):
    with filelike_object as file_obj:
        file_obj.do_something()


=== Source Interface ===
def handle_error_by_throwing_exception():
    pass


def handle_error_by_returning_none(input_data):
    pass


def handle_error_by_returning_tuple(input_data):
    pass


def filelike_objects_are_closed_on_exception(filelike_object):
    pass


=== Target Interface ===
package erratum

func Use(opener ResourceOpener, input string) error {
	panic("Please implement the Use function")
}


=== Source Test Code ===
import unittest

import error_handling as er
from test_utils import FileLike


class ErrorHandlingTest(unittest.TestCase):
    def test_throw_exception(self):
        with self.assertRaisesWithMessage(Exception):
            er.handle_error_by_throwing_exception()

    def test_return_none(self):
        self.assertEqual(er.handle_error_by_returning_none('1'), 1,
                         'Result of valid input should not be None')
        self.assertIsNone(er.handle_error_by_returning_none('a'),
                          'Result of invalid input should be None')

    def test_return_tuple(self):
        successful_result, result = er.handle_error_by_returning_tuple('1')
        self.assertIs(successful_result, True,
                      'Valid input should be successful')
        self.assertEqual(result, 1, 'Result of valid input should not be None')

        failure_result, result = er.handle_error_by_returning_tuple('a')
        self.assertIs(failure_result, False,
                      'Invalid input should not be successful')

    def test_filelike_objects_are_closed_on_exception(self):
        filelike_object = FileLike(fail_something=True)
        with self.assertRaisesWithMessage(Exception):
            er.filelike_objects_are_closed_on_exception(filelike_object)
        self.assertIs(filelike_object.is_open, False,
                      'filelike_object should be closed')
        self.assertIs(filelike_object.was_open, True,
                      'filelike_object should have been opened')
        self.assertIs(filelike_object.did_something, True,
                      'filelike_object should call do_something()')

    def test_filelike_objects_are_closed_without_exception(self):
        filelike_object = FileLike(fail_something=False)
        er.filelike_objects_are_closed_on_exception(filelike_object)
        self.assertIs(filelike_object.is_open, False,
                      'filelike_object should be closed')
        self.assertIs(filelike_object.was_open, True,
                      'filelike_object should have been opened')
        self.assertIs(filelike_object.did_something, True,
                      'filelike_object should call do_something()')

    # Utility functions
    def assertRaisesWithMessage(self, exception):
        return self.assertRaisesRegex(exception, r".+")


if __name__ == '__main__':
    unittest.main()


=== Target Test Code ===
package erratum

import (
	"errors"
	"testing"
)

// Please review the README for this exercise carefully before implementation.

// Little helper to let us customize behavior of the resource on a per-test
// basis.
type mockResource struct {
	close  func() error
	frob   func(string)
	defrob func(string)
}

const hello = "hello"

func (mr mockResource) Close() error      { return mr.close() }
func (mr mockResource) Frob(input string) { mr.frob(input) }
func (mr mockResource) Defrob(tag string) { mr.defrob(tag) }

// Use should not return an error on the "happy" path.
func TestNoErrors(t *testing.T) {
	var frobInput string
	var closeCallsCount int
	mr := mockResource{
		close: func() error { closeCallsCount++; return nil },
		frob:  func(input string) { frobInput = input },
	}
	opener := func() (Resource, error) { return mr, nil }
	err := Use(opener, hello)
	if err != nil {
		t.Fatalf("Unexpected error from Use: %v", err)
	}
	if frobInput != hello {
		t.Fatalf("Wrong string passed to Frob: got %v, expected %v", frobInput, hello)
	}
	if closeCallsCount == 0 {
		t.Fatalf("Close was not called")
	}
	if closeCallsCount != 1 {
		t.Fatalf("Close was called more than once")
	}
}

// Use should keep trying if a transient error is returned on open.
func TestKeepTryOpenOnTransient(t *testing.T) {
	var frobInput string
	mr := mockResource{
		close: func() error { return nil },
		frob:  func(input string) { frobInput = input },
	}
	nthCall := 0
	opener := func() (Resource, error) {
		if nthCall < 3 {
			nthCall++
			return mockResource{}, TransientError{errors.New("some error")}
		}
		return mr, nil
	}
	err := Use(opener, hello)
	if err != nil {
		t.Fatalf("Unexpected error from Use: %v", err)
	}
	if frobInput != hello {
		t.Fatalf("Wrong string passed to Frob: got %v, expected %v", frobInput, hello)
	}
}

// Use should fail if a non-transient error is returned on open.
func TestFailOpenOnNonTransient(t *testing.T) {
	nthCall := 0
	opener := func() (Resource, error) {
		if nthCall < 3 {
			nthCall++
			return mockResource{}, TransientError{errors.New("some error")}
		}
		return nil, errors.New("too awesome")
	}
	err := Use(opener, hello)
	if err == nil {
		t.Fatalf("Unexpected lack of error from Use")
	}
	if err.Error() != "too awesome" {
		t.Fatalf("Invalid error returned from Use")
	}
}

// Use should call Defrob and Close on FrobError panic from Frob
// and return the error.
func TestCallDefrobAndCloseOnFrobError(t *testing.T) {
	tag := "moo"
	var closeCallsCount int
	var defrobTag string
	mr := mockResource{
		close: func() error { closeCallsCount++; return nil },
		frob:  func(input string) { panic(FrobError{tag, errors.New("meh")}) },
		defrob: func(tag string) {
			if closeCallsCount != 0 {
				t.Fatalf("Close was called before Defrob")
			}
			defrobTag = tag
		},
	}
	opener := func() (Resource, error) { return mr, nil }
	err := Use(opener, hello)
	if err == nil {
		t.Fatalf("Unexpected lack of error from Use")
	}
	if err.Error() != "meh" {
		t.Fatalf("Invalid error returned from Use")
	}
	if defrobTag != tag {
		t.Fatalf("Wrong string passed to Defrob: got %v, expected %v", defrobTag, tag)
	}
	if closeCallsCount == 0 {
		t.Fatalf("Close was not called")
	}
	if closeCallsCount != 1 {
		t.Fatalf("Close was called more than once")
	}
}

// Use should call Close but not Defrob on non-FrobError panic from Frob
// and return the error.
func TestCallCloseOnNonFrobError(t *testing.T) {
	var closeCallsCount int
	var defrobCalled bool
	mr := mockResource{
		close:  func() error { closeCallsCount++; return nil },
		frob:   func(input string) { panic(errors.New("meh")) },
		defrob: func(tag string) { defrobCalled = true },
	}
	opener := func() (Resource, error) { return mr, nil }
	err := Use(opener, hello)
	if err == nil {
		t.Fatalf("Unexpected lack of error from Use")
	}
	if err.Error() != "meh" {
		t.Fatalf("Invalid error returned from Use")
	}
	if defrobCalled {
		t.Fatalf("Defrob was called")
	}
	if closeCallsCount == 0 {
		t.Fatalf("Close was not called")
	}
	if closeCallsCount != 1 {
		t.Fatalf("Close was called more than once")
	}
}


=== Initial Translation ===
// exercises/practice/error-handling/.meta/example.go
package erratum

import "errors"

// handleErrorByThrowingException throws an exception with a meaningful message.
func handleErrorByThrowingException() error {
	return errors.New("Meaningful message describing the source of the error")
}

// handleErrorByReturningNone attempts to convert inputData to an integer.
// If conversion fails, it returns nil.
func handleErrorByReturningNone(inputData string) *int {
	val, err := strconv.Atoi(inputData)
	if err != nil {
		return nil
	}
	return &val
}

// handleErrorByReturningTuple attempts to convert inputData to an integer.
// If conversion fails, it returns (false, nil).
func handleErrorByReturningTuple(inputData string) (bool, *int) {
	val, err := strconv.Atoi(inputData)
	if err != nil {
		return false, nil
	}
	return true, &val
}

// filelikeObjectsAreClosedOnException ensures that filelike objects are closed on exception.
func filelikeObjectsAreClosedOnException(filelikeObject FilelikeObject) {
	filelikeObject.DoSomething()
}

=== Initial Test Results ===
Return code: 2
=== STDOUT ===
FAIL	exercism/error-handling [build failed]
FAIL

=== STDERR ===
# exercism/error-handling [exercism/error-handling.test]
./error_handling.go:14:14: undefined: strconv
./error_handling.go:24:14: undefined: strconv
./error_handling.go:32:57: undefined: FilelikeObject
./error_handling_test.go:32:20: undefined: Resource
./error_handling_test.go:33:9: undefined: Use
./error_handling_test.go:56:20: undefined: Resource
./error_handling_test.go:59:27: undefined: TransientError
./error_handling_test.go:63:9: undefined: Use
./error_handling_test.go:75:20: undefined: Resource
./error_handling_test.go:78:27: undefined: TransientError
./error_handling_test.go:78:27: too many errors


=== Retry Attempt 1 ===
// exercises/practice/error-handling/.meta/example.go
package erratum

import (
	"errors"
	"strconv"
)

// handleErrorByThrowingException throws an exception with a meaningful message.
func handleErrorByThrowingException() error {
	return errors.New("Meaningful message describing the source of the error")
}

// handleErrorByReturningNone attempts to convert inputData to an integer.
// If conversion fails, it returns nil.
func handleErrorByReturningNone(inputData string) *int {
	val, err := strconv.Atoi(inputData)
	if err != nil {
		return nil
	}
	return &val
}

// handleErrorByReturningTuple attempts to convert inputData to an integer.
// If conversion fails, it returns (false, nil).
func handleErrorByReturningTuple(inputData string) (bool, *int) {
	val, err := strconv.Atoi(inputData)
	if err != nil {
		return false, nil
	}
	return true, &val
}

// FilelikeObject is an interface representing a file-like object.
type FilelikeObject interface {
	DoSomething()
}

// filelikeObjectsAreClosedOnException ensures that filelike objects are closed on exception.
func filelikeObjectsAreClosedOnException(filelikeObject FilelikeObject) {
	filelikeObject.DoSomething()
}

// Resource represents a resource that can be opened, frobbed, and closed.
type Resource interface {
	Close() error
	Frob(string)
	Defrob(string)
}

// TransientError represents a transient error.
type TransientError struct {
	error error
}

func (e TransientError) Error() string {
	return e.error.Error()
}

// FrobError represents a frob error.
type FrobError struct {
	tag string
	error error
}

func (e FrobError) Error() string {
	return e.error.Error()
}

// Use uses a resource opener to open a resource and perform operations on it.
func Use(opener func() (Resource, error), input string) error {
	var res Resource
	var err error
	for {
		res, err = opener()
		if err == nil {
			break
		}
		transientErr, ok := err.(TransientError)
		if !ok {
			return err
		}
		_ = transientErr // ignore transient error and retry
	}
	defer res.Close()
	frob := func() {
		disableDefrob := false
		defer func() {
			disableDefrob = true
		}()
		defer func() {
			if r := recover(); r != nil {
				if !disableDefrob {
					res.Defrob("")
				}
				panic(r)
			}
		}()
		res.Frob(input)
	}()
	frob()
	return nil
}

=== Test Results (Attempt 1) ===
Return code: 2
=== STDOUT ===
FAIL	exercism/error-handling [build failed]
FAIL

=== STDERR ===
# exercism/error-handling [exercism/error-handling.test]
./error_handling.go:86:10: func() {…}() (no value) used as value


=== ERROR ===
Error processing sample (returncode=2): {'error': {'object': 'error', 'type': 'invalid_request_error', 'message': "Request didn't generate first token before the given deadline"}}

=== FINAL STATUS: ERROR ===