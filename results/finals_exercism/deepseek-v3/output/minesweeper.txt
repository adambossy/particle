=== Initial Source Code ===
Source file: exercises/practice/minesweeper/.meta/example.py
def annotate(minefield):
    if not minefield:
        return []
    verify_board(minefield)
    row_len = len(minefield[0])
    col_len = len(minefield)
    board = [list(row) for row in minefield]

    for index1 in range(col_len):
        for index2 in range(row_len):
            if board[index1][index2] != ' ':
                continue

            low = max(index2 - 1, 0)
            high = min(index2 + 2, row_len + 2)
            counts = minefield[index1][low:high].count('*')

            if index1 > 0:
                counts += minefield[index1 - 1][low:high].count('*')
            if index1 < col_len - 1:
                counts += minefield[index1 + 1][low:high].count('*')
            if counts == 0:
                continue

            board[index1][index2] = str(counts)
    return [''.join(row) for row in board]


def verify_board(minefield):
    # Rows with different lengths
    row_len = len(minefield[0])
    if not all(len(row) == row_len for row in minefield):
        raise ValueError('The board is invalid with current input.')

    # Unknown character in board
    character_set = set()
    for row in minefield:
        character_set.update(row)
    if character_set - set(' *'):
        raise ValueError('The board is invalid with current input.')


=== Source Interface ===
def annotate(minefield):
    # Function body starts here
    pass


=== Target Interface ===
package minesweeper

// Annotate returns an annotated board
func Annotate(board []string) []string {
	panic("Please implement the Annotate function")
}


=== Source Test Code ===
# These tests are auto-generated with test data from:
# https://github.com/exercism/problem-specifications/tree/main/exercises/minesweeper/canonical-data.json
# File last updated on 2023-07-19

import unittest

from minesweeper import (
    annotate,
)


class MinesweeperTest(unittest.TestCase):
    def test_no_rows(self):
        self.assertEqual(annotate([]), [])

    def test_no_columns(self):
        self.assertEqual(annotate([""]), [""])

    def test_no_mines(self):
        self.assertEqual(annotate(["   ", "   ", "   "]), ["   ", "   ", "   "])

    def test_minefield_with_only_mines(self):
        self.assertEqual(annotate(["***", "***", "***"]), ["***", "***", "***"])

    def test_mine_surrounded_by_spaces(self):
        self.assertEqual(annotate(["   ", " * ", "   "]), ["111", "1*1", "111"])

    def test_space_surrounded_by_mines(self):
        self.assertEqual(annotate(["***", "* *", "***"]), ["***", "*8*", "***"])

    def test_horizontal_line(self):
        self.assertEqual(annotate([" * * "]), ["1*2*1"])

    def test_horizontal_line_mines_at_edges(self):
        self.assertEqual(annotate(["*   *"]), ["*1 1*"])

    def test_vertical_line(self):
        self.assertEqual(annotate([" ", "*", " ", "*", " "]), ["1", "*", "2", "*", "1"])

    def test_vertical_line_mines_at_edges(self):
        self.assertEqual(annotate(["*", " ", " ", " ", "*"]), ["*", "1", " ", "1", "*"])

    def test_cross(self):
        self.assertEqual(
            annotate(["  *  ", "  *  ", "*****", "  *  ", "  *  "]),
            [" 2*2 ", "25*52", "*****", "25*52", " 2*2 "],
        )

    def test_large_minefield(self):
        self.assertEqual(
            annotate([" *  * ", "  *   ", "    * ", "   * *", " *  * ", "      "]),
            ["1*22*1", "12*322", " 123*2", "112*4*", "1*22*2", "111111"],
        )

    # Additional tests for this track
    def test_annotate_9(self):
        self.assertEqual(
            annotate(["     ", "   * ", "     ", "     ", " *   "]),
            ["  111", "  1*1", "  111", "111  ", "1*1  "],
        )

    def test_different_len(self):
        with self.assertRaises(ValueError) as err:
            annotate([" ", "*  ", "  "])
        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(
            err.exception.args[0], "The board is invalid with current input."
        )

    def test_invalid_char(self):
        with self.assertRaises(ValueError) as err:
            annotate(["X  * "])
        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(
            err.exception.args[0], "The board is invalid with current input."
        )


=== Target Test Code ===
package minesweeper

import (
	"testing"
)

type minesweeperTestCase struct {
	description string
	minefield   []string
	expected    []string
}

var minesweeperTestCases = []minesweeperTestCase{
	{
		description: "no rows",
		minefield:   []string{},
		expected:    []string{},
	},
	{
		description: "no columns",
		minefield:   []string{""},
		expected:    []string{""},
	},
	{
		description: "no mines",
		minefield: []string{
			"   ",
			"   ",
			"   ",
		},
		expected: []string{
			"   ",
			"   ",
			"   ",
		},
	},
	{
		description: "minefield with only mines",
		minefield: []string{
			"***",
			"***",
			"***",
		},
		expected: []string{
			"***",
			"***",
			"***",
		},
	},
	{
		description: "mine surrounded by spaces",
		minefield: []string{
			"   ",
			" * ",
			"   ",
		},
		expected: []string{
			"111",
			"1*1",
			"111",
		},
	},
	{
		description: "space surrounded by mines",
		minefield: []string{
			"***",
			"* *",
			"***",
		},
		expected: []string{
			"***",
			"*8*",
			"***",
		},
	},
	{
		description: "horizontal line",
		minefield:   []string{" * * "},
		expected:    []string{"1*2*1"},
	},
	{
		description: "horizontal line, mines at edges",
		minefield:   []string{"*   *"},
		expected:    []string{"*1 1*"},
	},
	{
		description: "vertical line",
		minefield: []string{
			" ",
			"*",
			" ",
			"*",
			" ",
		},
		expected: []string{
			"1",
			"*",
			"2",
			"*",
			"1",
		},
	},
	{
		description: "vertical line, mines at edges",
		minefield: []string{
			"*",
			" ",
			" ",
			" ",
			"*",
		},
		expected: []string{
			"*",
			"1",
			" ",
			"1",
			"*",
		},
	},
	{
		description: "cross",
		minefield: []string{
			"  *  ",
			"  *  ",
			"*****",
			"  *  ",
			"  *  ",
		},
		expected: []string{
			" 2*2 ",
			"25*52",
			"*****",
			"25*52",
			" 2*2 ",
		},
	},
	{
		description: "large minefield",
		minefield: []string{
			" *  * ",
			"  *   ",
			"    * ",
			"   * *",
			" *  * ",
			"      ",
		},
		expected: []string{
			"1*22*1",
			"12*322",
			" 123*2",
			"112*4*",
			"1*22*2",
			"111111",
		},
	},
}

func slicesEqual(a, b []string) bool {
	if len(a) != len(b) {
		return false
	}
	if len(a) == 0 {
		return true
	}
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

func TestAnnotate(t *testing.T) {
	for _, tc := range minesweeperTestCases {
		t.Run(tc.description, func(t *testing.T) {
			got := Annotate(tc.minefield)
			want := tc.expected
			if !slicesEqual(want, got) {
				t.Fatalf("expected: %v, got: %v", want, got)
			}
		})
	}
}

var benchmarkResult []string

func BenchmarkAnnotate(b *testing.B) {
	if testing.Short() {
		b.Skip("skipping benchmark in short mode.")
	}
	var result []string
	board := []string{
		"1*22*1",
		"12*322",
		" 123*2",
		"112*4*",
		"1*22*2",
		"111111",
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		result = Annotate(board)
	}
	benchmarkResult = result
}


=== Initial Translation ===
// exercises/practice/minesweeper/.meta/example.go
package minesweeper

import (
	"errors"
	"strings"
)

// Annotate returns an annotated board
func Annotate(board []string) []string {
	if len(board) == 0 {
		return []string{}
	}
	err := verifyBoard(board)
	if err != nil {
		panic(err)
	}

	rowLen := len(board[0])
	colLen := len(board)
	boardRunes := make([][]rune, colLen)
	for i, row := range board {
		boardRunes[i] = []rune(row)
	}

	for i1 := 0; i1 < colLen; i1++ {
		for i2 := 0; i2 < rowLen; i2++ {
			if boardRunes[i1][i2] != ' ' {
				continue
			}

			low := max(i2-1, 0)
			high := min(i2+2, rowLen)
			counts := strings.Count(board[i1][low:high], "*")

			if i1 > 0 {
				counts += strings.Count(board[i1-1][low:high], "*")
			}
			if i1 < colLen-1 {
				counts += strings.Count(board[i1+1][low:high], "*")
			}
			if counts == 0 {
				continue
			}

			boardRunes[i1][i2] = rune('0' + counts)
		}
	}

	result := make([]string, colLen)
	for i, row := range boardRunes {
		result[i] = string(row)
	}
	return result
}

func verifyBoard(board []string) error {
	// Rows with different lengths
	rowLen := len(board[0])
	for _, row := range board {
		if len(row) != rowLen {
			return errors.New("The board is invalid with current input.")
		}
	}

	// Unknown character in board
	characterSet := make(map[rune]struct{})
	for _, row := range board {
		for _, char := range row {
			characterSet[char] = struct{}{}
		}
	}
	for char := range characterSet {
		if char != ' ' && char != '*' {
			return errors.New("The board is invalid with current input.")
		}
	}

	return nil
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}


=== Initial Test Results ===
Return code: 0
=== STDOUT ===
ok  	exercism/minesweeper	0.280s

=== STDERR ===


=== FINAL STATUS: SUCCESS ===